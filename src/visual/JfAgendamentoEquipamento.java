/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jfAgendamento.java
 *
 * 
 *
 * Created on 27/01/2010, 09:03:31
 */
package visual;

import conexao.Conexao;
import controlador.*;
import dao.DAO;
import excecoes.ExcCadastro;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import modelo.AgendamentoEquipamento;
import modelo.AgendamentoEquipamentoItens;
import modelo.Cmei;
import modelo.DepartamentoDivisaoSetor;
import modelo.Equipamento;
import modelo.Escola;
import modelo.Outro;
import modelo.Permissoes;
import modelo.TipoEquipamento;
import modelo.Usuario;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author luiz
 */
public class JfAgendamentoEquipamento extends javax.swing.JFrame {

    private static ControleVersao versao = new ControleVersao();
    private AgendamentoEquipamento agendamentoEquipamento;
    private AgendamentoEquipamentoItens agendamentoEquipamentoItens;
    private ClasseGeral classeGeral;
    private Cmei cmei;
    private ControleCmei controleCmei;
    private ControleEquipamento controleEquipamento;
    private ControleEscola controleEscola;
    private ControleImagem controleImagem = new ControleImagem();
    private ControleOutro controleOutro;
    private ControleTipoEquipamento controleTipoEquipamento;
    private DAO dao;
    private DefaultTableModel modelo;
    private DepartamentoDivisaoSetor departamentoDivisaoSetor;
    private Escola escola;
    private Equipamento equipamento;
    private Equipamento equipamento2;
    private Log geraLog;
    private Outro outro;
    private TipoEquipamento tipoEquipamento;
    private Usuario usuario;
    private VerificadorDataPeriodo verificadorDataPeriodo;
    
    private JdBuscaAgendamentoEquipamento jdbae;
    private JfCadastroEquipamento jfCadastroEquipamento;
    
    private JasperPrint jPrint;
    private JasperViewer jViewer;
    
    private int codigo = 0;
    private int codigoUsuario;
    private String tipoEntid = "ESCOLA";
    private String opcao = "salvar";
    private String equipamentoVerificado = "";
    private String equipamentoVerificado2 = "";
    private boolean agendarEquipamento;
    private boolean equipamento2Selecao = false;
    private Date ano;
    private List listaAgendamentoEquipamentoItens;

    /** Creates new form jfAgendamento */
    public JfAgendamentoEquipamento() {
        super("Agendamento Equipamentos - " + versao.getVersao() + " - " + versao.getAno());
        initComponents();
        
        //Altera icone na barra de titulo
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.getImage("C:/SURGI/imagens/SURGI32x32.png");
        this.setIconImage(img);

        //maximiza tela
        //this.setExtendedState(MAXIMIZED_BOTH);

        //centraliza tela
        setSize(getWidth(), getHeight());
        setLocationRelativeTo(null);

        jlbAnoAgendamento.setText(getAno());
        jDateChooserEmprestimo.setDate(getDateHoje());
        jrbEscola.setSelected(true);
        preencheComboEscolas();

        preencheComboUsuarios();
        preencheComboTipoEquipamento();
        preencheComboPatrimonios();

        setNumeroCaracteres();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgAgendamentoMultimidia = new javax.swing.ButtonGroup();
        jpmAgendamentoEquipamento = new javax.swing.JPopupMenu();
        jmiRemoverEquipamento = new javax.swing.JMenuItem();
        jpAgendamentoEquipamento = new javax.swing.JPanel();
        jlbAnoAgendamento = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtfNomeSolicitante = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jcbStatus = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jcbNomeEntidade = new javax.swing.JComboBox();
        jrbEscola = new javax.swing.JRadioButton();
        jrbCmei = new javax.swing.JRadioButton();
        jDateChooserEmprestimo = new com.toedter.calendar.JDateChooser();
        jDateChooserDevolucao = new com.toedter.calendar.JDateChooser();
        jrbOutros = new javax.swing.JRadioButton();
        jcbNomeUsuario = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcbPatrimonio = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jDateChooserDevolucaoReal = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jcbTipoEquipamento = new javax.swing.JComboBox();
        jbNovoEquipamento = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaObservacao = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbAgendamentoEquipamento = new javax.swing.JTable();
        jbMaisEquipamento1 = new javax.swing.JButton();
        jbAdicionarEquipamento = new javax.swing.JButton();
        jpBotoes = new javax.swing.JPanel();
        jbSalvar = new javax.swing.JButton();
        jbBuscar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbAlterar = new javax.swing.JButton();
        jbImprimir = new javax.swing.JButton();

        jmiRemoverEquipamento.setText("Remover Equipamento do Empréstimo");
        jmiRemoverEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiRemoverEquipamentoActionPerformed(evt);
            }
        });
        jpmAgendamentoEquipamento.add(jmiRemoverEquipamento);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpAgendamentoEquipamento.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());
        jpAgendamentoEquipamento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jlbAnoAgendamento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlbAnoAgendamento.setText("Ano Agendamento");
        jlbAnoAgendamento.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Tipo Entidade: ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Unidade: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Patrimônio do Equipamento: ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Data Devolução: ");

        jtfNomeSolicitante.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfNomeSolicitante.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtfNomeSolicitante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfNomeSolicitanteFocusLost(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Data Empréstimo: ");

        jcbStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AGENDADO", "EMPRESTADO", "NÃO RETIRADO PARA EMPRESTIMO", "CANCELADO", "DEVOLVIDO" }));
        jcbStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Nome Solicitante: ");

        jcbNomeEntidade.setBackground(new java.awt.Color(204, 204, 255));
        jcbNomeEntidade.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbNomeEntidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jcbNomeEntidade.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btgAgendamentoMultimidia.add(jrbEscola);
        jrbEscola.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbEscola.setSelected(true);
        jrbEscola.setText("Escola");
        jrbEscola.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jrbEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbEscolaActionPerformed(evt);
            }
        });

        btgAgendamentoMultimidia.add(jrbCmei);
        jrbCmei.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbCmei.setText("Cmei");
        jrbCmei.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jrbCmei.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCmeiActionPerformed(evt);
            }
        });

        jDateChooserEmprestimo.setBackground(new java.awt.Color(204, 204, 255));
        jDateChooserEmprestimo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 255), new java.awt.Color(204, 204, 255), null, new java.awt.Color(204, 204, 255)));
        jDateChooserEmprestimo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jDateChooserDevolucao.setBackground(new java.awt.Color(204, 204, 255));
        jDateChooserDevolucao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 255), new java.awt.Color(204, 204, 255), null, new java.awt.Color(204, 204, 255)));
        jDateChooserDevolucao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jDateChooserDevolucao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDateChooserDevolucaoFocusLost(evt);
            }
        });

        btgAgendamentoMultimidia.add(jrbOutros);
        jrbOutros.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbOutros.setText("Outros");
        jrbOutros.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jrbOutros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbOutrosActionPerformed(evt);
            }
        });

        jcbNomeUsuario.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbNomeUsuario.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Usuário: ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Data Devolução Real: ");

        jcbPatrimonio.setBackground(new java.awt.Color(204, 204, 255));
        jcbPatrimonio.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbPatrimonio.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Status: ");

        jDateChooserDevolucaoReal.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDateChooserDevolucaoReal.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Tipo de Equipamento: ");

        jcbTipoEquipamento.setBackground(new java.awt.Color(204, 204, 255));
        jcbTipoEquipamento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbTipoEquipamento.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jcbTipoEquipamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbTipoEquipamentoItemStateChanged(evt);
            }
        });

        jbNovoEquipamento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbNovoEquipamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/novo02.png"))); // NOI18N
        jbNovoEquipamento.setText("Novo Equipamento");
        jbNovoEquipamento.setToolTipText("Cadastra um novo equipamento");
        jbNovoEquipamento.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbNovoEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoEquipamentoActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setText("Observação: ");

        jtaObservacao.setColumns(20);
        jtaObservacao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtaObservacao.setLineWrap(true);
        jtaObservacao.setRows(5);
        jtaObservacao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtaObservacao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtaObservacaoFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jtaObservacao);

        jtbAgendamentoEquipamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Equipamento", "Tipo Equipamento", "Patrimônio", "Código"
            }
        ));
        jtbAgendamentoEquipamento.setToolTipText("Há opções clicando com o botão direito na tabela!");
        jtbAgendamentoEquipamento.setComponentPopupMenu(jpmAgendamentoEquipamento);
        jScrollPane2.setViewportView(jtbAgendamentoEquipamento);

        jbMaisEquipamento1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbMaisEquipamento1.setText("Mais Um");
        jbMaisEquipamento1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbMaisEquipamento1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMaisEquipamento1ActionPerformed(evt);
            }
        });

        jbAdicionarEquipamento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbAdicionarEquipamento.setText("Adicionar");
        jbAdicionarEquipamento.setToolTipText("Adiciona Equipamento à lista");
        jbAdicionarEquipamento.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbAdicionarEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarEquipamentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpAgendamentoEquipamentoLayout = new javax.swing.GroupLayout(jpAgendamentoEquipamento);
        jpAgendamentoEquipamento.setLayout(jpAgendamentoEquipamentoLayout);
        jpAgendamentoEquipamentoLayout.setHorizontalGroup(
            jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAgendamentoEquipamentoLayout.createSequentialGroup()
                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpAgendamentoEquipamentoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jlbAnoAgendamento))
                    .addGroup(jpAgendamentoEquipamentoLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jpAgendamentoEquipamentoLayout.createSequentialGroup()
                                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jpAgendamentoEquipamentoLayout.createSequentialGroup()
                                        .addComponent(jcbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(158, 158, 158))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jpAgendamentoEquipamentoLayout.createSequentialGroup()
                                    .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel10))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jpAgendamentoEquipamentoLayout.createSequentialGroup()
                                            .addComponent(jrbEscola)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jrbCmei)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jrbOutros))
                                        .addComponent(jtfNomeSolicitante)
                                        .addComponent(jcbNomeUsuario, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jcbNomeEntidade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jpAgendamentoEquipamentoLayout.createSequentialGroup()
                                            .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jDateChooserDevolucaoReal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jDateChooserEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(15, 15, 15)
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jDateChooserDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jpAgendamentoEquipamentoLayout.createSequentialGroup()
                                            .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jcbPatrimonio, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jcbTipoEquipamento, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jbNovoEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpAgendamentoEquipamentoLayout.createSequentialGroup()
                                                    .addComponent(jbMaisEquipamento1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jbAdicionarEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))))))))
                .addContainerGap(148, Short.MAX_VALUE))
        );
        jpAgendamentoEquipamentoLayout.setVerticalGroup(
            jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAgendamentoEquipamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlbAnoAgendamento)
                .addGap(18, 18, 18)
                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jrbEscola)
                    .addComponent(jrbCmei)
                    .addComponent(jrbOutros))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel8)
                    .addComponent(jcbNomeUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jcbNomeEntidade, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooserEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jDateChooserDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(jDateChooserDevolucaoReal, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jtfNomeSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jcbTipoEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbNovoEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcbPatrimonio, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbMaisEquipamento1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAdicionarEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoEquipamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jpBotoes.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());

        jbSalvar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/OK.png"))); // NOI18N
        jbSalvar.setText("Salvar");
        jbSalvar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbBuscar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/pesquisar.png"))); // NOI18N
        jbBuscar.setText("Buscar");
        jbBuscar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbCancelar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cancelar.png"))); // NOI18N
        jbCancelar.setText("Cancelar");
        jbCancelar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jbExcluir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/delete02.png"))); // NOI18N
        jbExcluir.setText("Excluir");
        jbExcluir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbExcluir.setEnabled(false);
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbAlterar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/reload.png"))); // NOI18N
        jbAlterar.setText("Alterar");
        jbAlterar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbAlterar.setEnabled(false);
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarActionPerformed(evt);
            }
        });

        jbImprimir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imprimir.png"))); // NOI18N
        jbImprimir.setText("Imprimir");
        jbImprimir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbImprimir.setEnabled(false);
        jbImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpBotoesLayout = new javax.swing.GroupLayout(jpBotoes);
        jpBotoes.setLayout(jpBotoesLayout);
        jpBotoesLayout.setHorizontalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBotoesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpBotoesLayout.setVerticalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpAgendamentoEquipamento, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpBotoes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpAgendamentoEquipamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        fechar();
    }//GEN-LAST:event_formWindowClosing

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed

        if (jdbae == null) {
            jdbae = new JdBuscaAgendamentoEquipamento(null, true);
        }

        jdbae.setVisible(true);

        setAgendamentoBuscado(jdbae.getAgendamentoEquipamento());
        jdbae.setAgendamentoEquipamento();

    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarActionPerformed

        abilitaCampos();

        jbAdicionarEquipamento.setEnabled(true);
        jbMaisEquipamento1.setEnabled(true);
        jbNovoEquipamento.setEnabled(true);
        
        jbAlterar.setEnabled(false);

        opcao = "alterar";

        jbSalvar.setEnabled(true);

    }//GEN-LAST:event_jbAlterarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        cancelar();
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed

        iniciaVerificadorDataPeriodo();
        
        if (jDateChooserDevolucaoReal.getDate() != null) {
            
            if (verificadorDataPeriodo.verificaDatas(jDateChooserEmprestimo.getDate(), jDateChooserDevolucao.getDate())) {
            
                iniciaClasseGeral();
                classeGeral.msgAtencao("Data de Devolução Real não é válida com relação a Data de Empréstimo!'");
                jDateChooserDevolucao.setDate(null);
            
            }
        }
        
        if (verificadorDataPeriodo.verificaDatas(jDateChooserEmprestimo.getDate(), jDateChooserDevolucao.getDate())) {
            
            iniciaClasseGeral();
            classeGeral.msgAtencao("Data de Devolução não é válida com relação a Data de Empréstimo!'");
            jDateChooserDevolucao.setDate(null);
            
        } else if (jcbStatus.getSelectedItem().equals("DEVOLVIDO") && jDateChooserDevolucaoReal.getDate() == null) {

            iniciaClasseGeral();
            classeGeral.msgAtencao("Preencha o campo 'Data Devolução Real!'");

        } else if (!jcbStatus.getSelectedItem().equals("DEVOLVIDO") && jDateChooserDevolucaoReal.getDate() != null) {

            jcbStatus.setSelectedItem("DEVOLVIDO");

        } else {

            verificaDisponibilidadeEquipamento();

            if (opcao.equals("salvar")) {

                if (!equipamentoVerificado.equals("") || !equipamentoVerificado2.equals("")) {

                    iniciaClasseGeral();
                    classeGeral.msgAtencao("O Equipamento já esta Agendado para esta Data!'");

                } else {

                    salvar();
                    opcao = "salvar";

                }

            } else if (opcao.equals("alterar")) {

                atualizar();
                opcao = "salvar";

            }

        }
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        excluir();
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImprimirActionPerformed

        //ADOGeral ag = new ADOGeral();
        Conexao conexao = new Conexao();
        HashMap parametros = new HashMap();
        try {
            //System.out.println(codigoRegistro);
            //parametros.put("titulo", "Titulo Relatorio");
            if (jrbEscola.isSelected()) {
                tipoEntid = "ESCOLA";
            } else if (jrbCmei.isSelected()) {
                tipoEntid = "CMEI";
            } else if (jrbOutros.isSelected()) {
                tipoEntid = "";
            }
            parametros.put("nomeTipoEntidade", tipoEntid + " " + jcbNomeEntidade.getSelectedItem());
            parametros.put("nomeDepartamentoDivisaoSetor", getNomeDepartamentoDivisaoSetorUsuario());
            //parametros.put("dataEmprestimo", jDateChooserEmprestimo.getDate());
            parametros.put("codigoAgendamentoEquipamento", codigo);
            //ADOGeral.conectar();
            conexao.getConexao();
        } catch (ExcCadastro ex) {
            Logger.getLogger(JfImpressosAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }

        //        JRDataSource jrds = new JRBeanCollectionDataSource(lista);

        try {


            //jReport = JasperCompileManager.compileReport("E:/LUIZ/PROJETOS JAVA/CORPORATIVO/m2GestaoClinicas/FichaPaciente.jrxml");
            //jPrint = JasperFillManager.fillReport("C:/m2GestaoClinicas/FichaPaciente.jasper", parametros, ADOGeral.getConexao());
            jPrint = JasperFillManager.fillReport("TermoEmprestimoEquipamento.jasper", parametros, conexao.getConexao());
            //jPrint = JasperFillManager.fillReport(jReport, parametros, jrds);

            //if (!(jViewer == null)) {
            //jViewer = new JasperViewer(jPrint, false);
            //jViewer.setExtendedState(JFrame.MAXIMIZED_BOTH);
            jViewer.viewReport(jPrint, false);
            //}

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jbImprimirActionPerformed

    private void jbNovoEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoEquipamentoActionPerformed

        if (jfCadastroEquipamento == null) {
            jfCadastroEquipamento = new JfCadastroEquipamento();
        }

        jfCadastroEquipamento.setCodigoUsuario(codigoUsuario);
        jfCadastroEquipamento.setVisible(true);
        preencheComboTipoEquipamento();
        preencheComboPatrimonios();
    }//GEN-LAST:event_jbNovoEquipamentoActionPerformed

    private void jrbOutrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbOutrosActionPerformed

        preencheComboOutros();
        tipoEntid = "OUTROS";
        
    }//GEN-LAST:event_jrbOutrosActionPerformed

    private void jrbCmeiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCmeiActionPerformed

        preencheComboCmeis();
        tipoEntid = "CMEI";
        
    }//GEN-LAST:event_jrbCmeiActionPerformed

    private void jrbEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbEscolaActionPerformed

        preencheComboEscolas();
        tipoEntid = "ESCOLA";
        
    }//GEN-LAST:event_jrbEscolaActionPerformed

    private void jtfNomeSolicitanteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfNomeSolicitanteFocusLost
        jtfNomeSolicitante.setText(jtfNomeSolicitante.getText().toUpperCase());
}//GEN-LAST:event_jtfNomeSolicitanteFocusLost

    private void jDateChooserDevolucaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDateChooserDevolucaoFocusLost
        
    }//GEN-LAST:event_jDateChooserDevolucaoFocusLost

    private void jtaObservacaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtaObservacaoFocusLost
        jtaObservacao.setText(jtaObservacao.getText().toUpperCase());
    }//GEN-LAST:event_jtaObservacaoFocusLost

    private void jbMaisEquipamento1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMaisEquipamento1ActionPerformed
        maisUmEquipamento();
    }//GEN-LAST:event_jbMaisEquipamento1ActionPerformed

    private void jbAdicionarEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarEquipamentoActionPerformed
        
        if (jcbTipoEquipamento.getSelectedIndex() != 0 && jcbPatrimonio.getSelectedIndex() != 0) {
            
            Equipamento equipamentoAdicionado;
            
            iniciaDao();
            iniciaTabelaAgendamentoEquipamento();
            
            equipamentoAdicionado = (Equipamento) dao.buscaEquipamento(0, "", "", jcbPatrimonio.getSelectedItem().toString());
            
            verificaDisponibilidadeEquipamento();
            
            if (!equipamentoVerificado.equals("AGENDADO") && !equipamentoVerificado.equals("EMPRESTADO")) {
                
                modelo.addRow(new String[]{equipamentoAdicionado.getModeloEquipamento(), equipamentoAdicionado.getTipoEquipamento().getNomeTipoEquipamento(), equipamentoAdicionado.getPatrimonioEquipamento(), String.valueOf(equipamentoAdicionado.getCodigoEquipamento())});
                
            } else {
                iniciaClasseGeral();
                
                classeGeral.msgInforma("Equipamento já está agendado/emprestado para esta data!");
            }
            
        }
        
    }//GEN-LAST:event_jbAdicionarEquipamentoActionPerformed

    private void jcbTipoEquipamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbTipoEquipamentoItemStateChanged
        if (jcbTipoEquipamento.getItemCount() != 0) {
            preencheComboPatrimonios();
        }
    }//GEN-LAST:event_jcbTipoEquipamentoItemStateChanged

    private void jmiRemoverEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiRemoverEquipamentoActionPerformed
        
        iniciaClasseGeral();
        
        if (classeGeral.msgConfirmaAtualizacao("Deseja remover o Equipamento selecionado?")) {
            
            removeItemTabela();
        
        }
        
    }//GEN-LAST:event_jmiRemoverEquipamentoActionPerformed
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
    public void run() {
    new jfAgendamento().setVisible(true);
    }
    });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgAgendamentoMultimidia;
    private com.toedter.calendar.JDateChooser jDateChooserDevolucao;
    private com.toedter.calendar.JDateChooser jDateChooserDevolucaoReal;
    private com.toedter.calendar.JDateChooser jDateChooserEmprestimo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbAdicionarEquipamento;
    private javax.swing.JButton jbAlterar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbImprimir;
    private javax.swing.JButton jbMaisEquipamento1;
    private javax.swing.JButton jbNovoEquipamento;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JComboBox jcbNomeEntidade;
    private javax.swing.JComboBox jcbNomeUsuario;
    private javax.swing.JComboBox jcbPatrimonio;
    private javax.swing.JComboBox jcbStatus;
    private javax.swing.JComboBox jcbTipoEquipamento;
    private javax.swing.JLabel jlbAnoAgendamento;
    private javax.swing.JMenuItem jmiRemoverEquipamento;
    private javax.swing.JPanel jpAgendamentoEquipamento;
    private javax.swing.JPanel jpBotoes;
    private javax.swing.JPopupMenu jpmAgendamentoEquipamento;
    private javax.swing.JRadioButton jrbCmei;
    private javax.swing.JRadioButton jrbEscola;
    private javax.swing.JRadioButton jrbOutros;
    private javax.swing.JTextArea jtaObservacao;
    private javax.swing.JTable jtbAgendamentoEquipamento;
    private javax.swing.JTextField jtfNomeSolicitante;
    // End of variables declaration//GEN-END:variables

//Outros Metodos ===========================================================================================================================================
    public void fechar() {

        if (jcbNomeEntidade.getSelectedIndex() != 0 || !jtfNomeSolicitante.getText().isEmpty()) {

            iniciaClasseGeral();
            classeGeral.msgAtencao("Cancele ou Salve o Agendamento em Edição!");

        } else {

            dao = null;
            this.dispose();
        }
    }

    public void cancelar() {

        iniciaDao();
        iniciaTabelaAgendamentoEquipamento();
        
        preencheComboUsuarios();
        
        jrbEscola.setSelected(true);
        tipoEntid = "ESCOLA";
        jrbCmei.setSelected(false);
        jrbOutros.setSelected(false);
        
        preencheComboEscolas();
        preencheComboTipoEquipamento();
        
        jcbNomeEntidade.setSelectedIndex(0);
        jDateChooserEmprestimo.setDate(getDateHoje());
        jDateChooserDevolucao.setDate(null);
        jDateChooserDevolucaoReal.setDate(null);
        jtfNomeSolicitante.setText("");
        jcbStatus.setSelectedIndex(0);
        jtaObservacao.setText("");

        preencheComboPatrimonios();

        jcbPatrimonio.setSelectedIndex(0);

        abilitaCampos();

        usuario = (Usuario) dao.busca(usuario, codigoUsuario);
        dao.encerraSessao();
        jcbNomeUsuario.setSelectedItem(usuario.getNomeUsuario());
        
        desabilitaBotoes();
        
        modelo.setRowCount(0);

        agendamentoEquipamento = null;
        cmei = null;
        codigo = 0;
        departamentoDivisaoSetor = null;
        equipamento = null;
        equipamento2 = null;
        equipamentoVerificado = "";
        equipamentoVerificado2 = "";
        escola = null;
        opcao = "salvar";
        outro = null;
        tipoEquipamento = null;
        usuario = null;
        listaAgendamentoEquipamentoItens = null;

    }

    public void abilitaCampos() {

        jrbEscola.setEnabled(true);
        jrbCmei.setEnabled(true);
        jrbOutros.setEnabled(true);
        jcbNomeEntidade.setEnabled(true);
        jDateChooserEmprestimo.setEnabled(true);
        jDateChooserDevolucao.setEnabled(true);
        jDateChooserDevolucaoReal.setEnabled(true);
        jtfNomeSolicitante.setEditable(true);
        jcbStatus.setEnabled(true);
        jcbNomeUsuario.setEnabled(true);
        jcbPatrimonio.setEnabled(true);
        jcbTipoEquipamento.setEnabled(true);
        jtaObservacao.setEnabled(true);

    }

    public void desabilitaCampos() {

        jrbEscola.setEnabled(false);
        jrbCmei.setEnabled(false);
        jrbOutros.setEnabled(false);
        jcbNomeEntidade.setEnabled(false);
        jDateChooserEmprestimo.setEnabled(false);
        jDateChooserDevolucao.setEnabled(false);
        jDateChooserDevolucaoReal.setEnabled(false);
        jtfNomeSolicitante.setEditable(false);
        jcbPatrimonio.setEnabled(false);
        jcbTipoEquipamento.setEnabled(false);
        jcbStatus.setEnabled(false);
        jcbNomeUsuario.setEnabled(false);
        jtaObservacao.setEnabled(false);

    }

    public void abilitaBotoes() {

        jbAdicionarEquipamento.setEnabled(false);
        jbCancelar.setEnabled(true);
        jbBuscar.setEnabled(true);
        jbImprimir.setEnabled(true);
        jbMaisEquipamento1.setEnabled(false);
        jbNovoEquipamento.setEnabled(false);

        if (agendarEquipamento == true) {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(true);
            jbAlterar.setEnabled(true);
        } else {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        }

    }

    public void desabilitaBotoes() {

        jbAdicionarEquipamento.setEnabled(true);
        jbCancelar.setEnabled(true);
        jbBuscar.setEnabled(true);
        jbImprimir.setEnabled(false);
        jbMaisEquipamento1.setEnabled(true);
        jbNovoEquipamento.setEnabled(true);

        if (agendarEquipamento == true) {
            jbSalvar.setEnabled(true);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        } else {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        }

    }

    public void preencheComboEscolas() {

        iniciaDao();
        
        List listaEscolas = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaEscolas = dao.listarEscolas(0, "", "");

        for (int i = 0; i < listaEscolas.size(); i++) {
            iniciaEscola();
            escola = (Escola) listaEscolas.get(i);
            jcbNomeEntidade.addItem(escola.getNomeEscola());
        }

    }

    public void preencheComboCmeis() {

        iniciaDao();
        
        List listaCmeis = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaCmeis = dao.listarCmeis(0, "", "");

        for (int i = 0; i < listaCmeis.size(); i++) {
            iniciaCmei();
            cmei = (Cmei) listaCmeis.get(i);
            jcbNomeEntidade.addItem(cmei.getNomeCmei());
        }
    }

    public void preencheComboOutros() {

        iniciaDao();
        
        List listaOutros = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaOutros = dao.listarOutros(0, "", "");

        for (int i = 0; i < listaOutros.size(); i++) {
            iniciaOutro();
            outro = (Outro) listaOutros.get(i);
            jcbNomeEntidade.addItem(outro.getNomeOutro());
        }

    }

    public void preencheComboUsuarios() {

        iniciaDao();
        
        List listaUsuarios = new ArrayList();

        jcbNomeUsuario.removeAllItems();
        jcbNomeUsuario.addItem("");

        listaUsuarios = dao.listarUsuarios(0, "", "", false);

        for (int i = 0; i < listaUsuarios.size(); i++) {
            iniciaUsuario();
            usuario = (Usuario) listaUsuarios.get(i);
            jcbNomeUsuario.addItem(usuario.getNomeUsuario());
        }

    }

    public void preencheComboTipoEquipamento() {

        iniciaDao();
        
        List listaTipoEquipamentos = new ArrayList();

        jcbTipoEquipamento.removeAllItems();

        listaTipoEquipamentos = dao.listarTipoEquipamentos(0, "");

        for (int i = 0; i < listaTipoEquipamentos.size(); i++) {
            iniciaTipoEquipamento();
            tipoEquipamento = (TipoEquipamento) listaTipoEquipamentos.get(i);
            jcbTipoEquipamento.addItem(tipoEquipamento.getNomeTipoEquipamento());
        }

        jcbTipoEquipamento.setSelectedIndex(0);

    }

    public void preencheComboPatrimonios() {

        iniciaDao();
        iniciaControleTipoEquipamento();
        
        List listaPatrimonios = new ArrayList();

        jcbPatrimonio.removeAllItems();
        jcbPatrimonio.addItem("");
        
        listaPatrimonios = dao.listarEquipamento(0, controleTipoEquipamento.getCodigoEquipamento(jcbTipoEquipamento.getSelectedItem().toString()), "", "", "");

        for (int i = 0; i < listaPatrimonios.size(); i++) {
            
            iniciaEquipamento();
            equipamento = (Equipamento) listaPatrimonios.get(i);
            
            if (equipamento.isDiponibilidadeEmprestimo()) {
                jcbPatrimonio.addItem(equipamento.getPatrimonioEquipamento());
            }
            
        }
        
        dao.encerraSessao();

    }

    public void maisUmEquipamento() {
        
        preencheComboTipoEquipamento();
        preencheComboPatrimonios();
        
    }
    
    public void removeItemTabela() {
        
        iniciaTabelaAgendamentoEquipamento();
        
        modelo.removeRow(jtbAgendamentoEquipamento.getSelectedRow());
        
    }
    
//Geradores, Validadores===========================================================================================================================================
    public void iniciaAgendamentoEquipamento(){
        
        if (agendamentoEquipamento == null) {
            agendamentoEquipamento = new AgendamentoEquipamento();
        }
        
    }
    
    public void iniciaAgendamentoEquipamentoItens(){
        
        if (agendamentoEquipamentoItens == null) {
            agendamentoEquipamentoItens = new AgendamentoEquipamentoItens();
        }
        
    }

    public void iniciaClasseGeral() {
        
        if (classeGeral == null) {
            classeGeral = new ClasseGeral();
        }
        
    }
    
    public void iniciaCmei() {
        
        if (cmei == null) {
            cmei = new Cmei();
        }
        
    }
    
    public void iniciaControleCmei() {
        
        if (controleCmei == null) {
            controleCmei = new ControleCmei();
        }
        
    }
    
    public void iniciaControleEquipamento() {
        
        if (controleEquipamento == null) {
            controleEquipamento = new ControleEquipamento();
        }
        
    }
    
    public void iniciaControleEscola() {
        
        if (controleEscola == null) {
            controleEscola = new ControleEscola();
        }
        
    }
    
    public void iniciaControleOutro() {
        
        if (controleOutro == null) {
            controleOutro = new ControleOutro();
        }
        
    }
    
    public void iniciaControleTipoEquipamento() {
        
        if (controleTipoEquipamento == null) {
            controleTipoEquipamento = new ControleTipoEquipamento();
        }
        
    }
    
    public void iniciaDao() {

        if (dao == null) {
            dao = new DAO();
        }

    }
    
    public void iniciaDepartamentoDivisaoSetor() {
        
        if (departamentoDivisaoSetor == null) {
            departamentoDivisaoSetor = new DepartamentoDivisaoSetor();
        }
        
    }
    
    public void iniciaEscola() {
        
        if (escola == null) {
            escola = new Escola();
        }
        
    }
    
    public void iniciaEquipamento() {
        
        if (equipamento == null) {
            equipamento = new Equipamento();
        }
        
    }
    
    public void iniciaEquipamento2() {
        
        if (equipamento2 == null) {
            equipamento2 = new Equipamento();
        }
        
    }
    
    public void iniciaListaAgendamentoEquipamentoItens() {
        
        if (listaAgendamentoEquipamentoItens == null) {
            listaAgendamentoEquipamentoItens = new ArrayList();
        }
        
    }
    
    public void iniciaLog() {
        
        if (geraLog == null) {
            geraLog = new Log();
        }
        
    }
    
    public void iniciaOutro() {
        
        if (outro == null) {
            outro = new Outro();
        }
        
    }
    
    public void iniciaTabelaAgendamentoEquipamento() {
        
        modelo = (DefaultTableModel) jtbAgendamentoEquipamento.getModel();
        
    }
    
    public void iniciaTipoEquipamento() {
        
        if (tipoEquipamento == null) {
            tipoEquipamento = new TipoEquipamento();
        }
        
    }
    
    public void iniciaUsuario() {
        
        if (usuario == null) {
            usuario = new Usuario();
        }
        
    }
    
    public void iniciaVerificadorDataPeriodo() {
        
        if (verificadorDataPeriodo == null) {
            verificadorDataPeriodo = new VerificadorDataPeriodo();
        }
        
    }
    
    public void verificaDisponibilidadeEquipamento() {

        iniciaDao();
        iniciaControleEquipamento();
        
        List lista = new ArrayList();
        
        lista = dao.verificarDisponibilidadeEquipamento(jDateChooserEmprestimo.getDate());
        
        if (lista.size() > 0) {
            
            List listaEquipamentosItens = new ArrayList();
            
            listaEquipamentosItens = lista;
            
            for (int j = 0; j < listaEquipamentosItens.size(); j++) {
                
                AgendamentoEquipamento agendamentoEquipamentoVerificador;
                iniciaAgendamentoEquipamentoItens();
                iniciaEquipamento();
                
                agendamentoEquipamentoItens = (AgendamentoEquipamentoItens) listaEquipamentosItens.get(j);
                agendamentoEquipamentoVerificador = agendamentoEquipamentoItens.getAgendamentoEquipamento();
                
                equipamento = (Equipamento) dao.busca(equipamento, agendamentoEquipamentoItens.getEquipamento().getCodigoEquipamento());
                
                //equipamentoVerificado = equipamento.getPatrimonioEquipamento();
                
                if (equipamento.getPatrimonioEquipamento().equals(jcbPatrimonio.getSelectedItem().toString())) {
                    equipamentoVerificado = agendamentoEquipamentoVerificador.getStatus();
                }
                agendamentoEquipamentoVerificador = null;
            }
            
            /*System.out.println("" + agendamentoEquipamento.getListaAgendamentoEquipamentoItens().size());
            agendamentoEquipamentoItens = (AgendamentoEquipamentoItens) agendamentoEquipamento.getListaAgendamentoEquipamentoItens().get(i);
            equipamento = (Equipamento) agendamentoEquipamentoItens.getEquipamento();
            
            equipamentoVerificado = equipamento.getPatrimonioEquipamento();
            
            if (equipamento.getPatrimonioEquipamento() == jcbPatrimonio.getSelectedItem().toString()) {
                equipamentoVerificado = agendamentoEquipamento.getStatus();
            }*/
            
        }
        
        dao.encerraSessao();
        
        //equipamentoVerificado = dao.verificarDisponibilidadeEquipamento(jDateChooserEmprestimo.getDate(), jcbPatrimonio.getSelectedItem().toString());
        
        //equipamentoVerificado2 = dao.verificarDisponibilidadeEquipamento(jDateChooserEmprestimo.getDate(), jcbPatrimonio.getSelectedItem().toString());

    }
    
//Getters and Setters===========================================================================================================================================
    public Date getDateHoje() {

        GregorianCalendar calendar = new GregorianCalendar();
        Date data = calendar.getTime();

        return data;

    }

    public String getAno() {

        return "Ano de " + versao.getAno();

    }

    public void setNumeroCaracteres() {

        jtfNomeSolicitante.setDocument(new FixedLengthDocument(50));

    }

    public int getCodigoUsuario() {
        return codigoUsuario;
    }

    public void setCodigoUsuario(int codigoUsuario) {
        iniciaDao();
        iniciaUsuario();
        this.codigoUsuario = codigoUsuario;
        getPermissoes();
        
        usuario = (Usuario) dao.busca(usuario, codigoUsuario);
        dao.encerraSessao();
        jcbNomeUsuario.setSelectedItem(usuario.getNomeUsuario());
        usuario = null;
        
        desabilitaBotoes();
    }

    public void getPermissoes() {
        Permissoes permissoes;
        iniciaDao();

        permissoes = (Permissoes) dao.buscaPermissoes(codigoUsuario);

        agendarEquipamento = permissoes.isAgendarEquipamento();
    }

    public void setAgendamentoBuscado(AgendamentoEquipamento agendamentoBuscado) {

        if (agendamentoBuscado == null) {
        } else {
            
            iniciaAgendamentoEquipamento();
            iniciaListaAgendamentoEquipamentoItens();
            iniciaUsuario();
                    
            if (agendamentoBuscado.getTipoEntidade().equals("ESCOLA")) {
                
                iniciaEscola();
                jrbEscola.setSelected(true);
                preencheComboEscolas();
                
                escola = (Escola) agendamentoBuscado.getEscola();
                jcbNomeEntidade.setSelectedItem(escola.getNomeEscola());
                tipoEntid = "ESCOLA";
                
            } else if (agendamentoBuscado.getTipoEntidade().equals("CMEI")) {
                
                iniciaCmei();
                jrbCmei.setSelected(true);
                preencheComboCmeis();
                
                cmei = (Cmei) agendamentoBuscado.getCmei();
                jcbNomeEntidade.setSelectedItem(cmei.getNomeCmei());
                tipoEntid = "CMEI";
                
            } else if (agendamentoBuscado.getTipoEntidade().equals("OUTROS")) {
                
                iniciaOutro();
                jrbOutros.setSelected(true);
                preencheComboOutros();
                
                outro = (Outro) agendamentoBuscado.getOutro();
                jcbNomeEntidade.setSelectedItem(outro.getNomeOutro());
                tipoEntid = "OUTROS";
                
            }

            jtfNomeSolicitante.setText(agendamentoBuscado.getNomeSolicitante());
            jcbStatus.setSelectedItem(agendamentoBuscado.getStatus());
            
            jcbNomeUsuario.setSelectedItem(agendamentoBuscado.getUsuario().getNomeUsuario());
            
            listaAgendamentoEquipamentoItens = dao.listarAgendamentoEquipamentoItens(agendamentoBuscado.getCodigoAgendamentoEquipamento());
            
            for (int i = 0; i < listaAgendamentoEquipamentoItens.size(); i++) {
                
                iniciaAgendamentoEquipamentoItens();
                iniciaTabelaAgendamentoEquipamento();
                iniciaEquipamento();
                
                agendamentoEquipamentoItens = (AgendamentoEquipamentoItens) listaAgendamentoEquipamentoItens.get(i);
                equipamento = agendamentoEquipamentoItens.getEquipamento();
                
                modelo.addRow(new String[]{equipamento.getModeloEquipamento(), equipamento.getTipoEquipamento().getNomeTipoEquipamento(), equipamento.getPatrimonioEquipamento(), String.valueOf(equipamento.getCodigoEquipamento())});
                
            }
            
            agendamentoEquipamento.setListaAgendamentoEquipamentoItens(listaAgendamentoEquipamentoItens);
            listaAgendamentoEquipamentoItens = null;
            
            /*jcbTipoEquipamento.setSelectedItem(agendamentoBuscado.getTipoEquipamento());

            preencheComboPatrimonios();

            iniciaEquipamento();
            equipamento = (Equipamento) agendamentoBuscado.getEquipamento();
            jcbPatrimonio.setSelectedItem(equipamento.getPatrimonioEquipamento());
            jcbTipoEquipamento2.setSelectedItem(agendamentoBuscado.getTipoEquipamento2());

            preencheComboPatrimonios2();
            
            iniciaEquipamento2();
            equipamento2 = (Equipamento) agendamentoBuscado.getEquipamento2();
            jcbPatrimonio2.setSelectedItem(equipamento2.getPatrimonioEquipamento());*/
            
            jDateChooserDevolucaoReal.setDate(agendamentoBuscado.getDataDevolucaoReal());
            jDateChooserEmprestimo.setDate(agendamentoBuscado.getDataEmprestimo());
            jDateChooserDevolucao.setDate(agendamentoBuscado.getDataDevolucao());
            jtaObservacao.setText(agendamentoBuscado.getObservacao());

            codigo = agendamentoBuscado.getCodigoAgendamentoEquipamento();//para testar comando excluir
            agendamentoEquipamento.setCodigoAgendamentoEquipamento(codigo);

            desabilitaCampos();

            abilitaBotoes();

            cmei = null;
            escola = null;
            outro = null;
            equipamento = null;
            equipamento2 = null;
            
        }
    }
    
    public String getNomeDepartamentoDivisaoSetorUsuario() {
        
        iniciaUsuario();
        iniciaDepartamentoDivisaoSetor();
        
        String nomeDepartDivSet = "";
        List lista = new ArrayList();
        
        lista = dao.listarUsuarios(codigoUsuario, "", "", false);
        
        for (int i = 0; i < lista.size(); i++) {
            usuario = (Usuario) lista.get(i);
            departamentoDivisaoSetor = usuario.getDepartamentoDivisaoSetor();
            nomeDepartDivSet = departamentoDivisaoSetor.getNomeDepartamentoDivisaoSetor();
        }
        
        return nomeDepartDivSet;
        
    }

//Metodos DAO===========================================================================================================================================
    public void salvar() {

        if (jcbNomeEntidade.getSelectedIndex() != 0 && !jDateChooserEmprestimo.getDate().equals(null)
                && !jDateChooserDevolucao.getDate().equals(null) && modelo.getRowCount() > 0) {

            agendamentoEquipamento = null;
            
            iniciaDao();
            iniciaAgendamentoEquipamento();
            iniciaControleEquipamento();
            iniciaListaAgendamentoEquipamentoItens();
            
            agendamentoEquipamento.setAnoAgendamento(versao.getAno());
            
            for (int i = 0; i < modelo.getRowCount(); i++) {
                
                iniciaEquipamento();
                
                equipamento = (Equipamento) dao.busca(equipamento, Integer.valueOf((String) jtbAgendamentoEquipamento.getValueAt(i, 3)));
                dao.encerraSessao();
                listaAgendamentoEquipamentoItens.add(equipamento);
                
            }
            
            //agendamentoEquipamento.setListaAgendamentoEquipamentoItens(listaAgendamentoEquipamentoItens);
            
            iniciaUsuario();
            usuario = (Usuario) dao.buscaUsuario(0, jcbNomeUsuario.getSelectedItem().toString(), "");
            agendamentoEquipamento.setUsuario(usuario);
            usuario = null;
            
            agendamentoEquipamento.setNomeSolicitante(jtfNomeSolicitante.getText());
            agendamentoEquipamento.setDataDevolucaoReal(jDateChooserDevolucaoReal.getDate());
            agendamentoEquipamento.setDataDevolucao(jDateChooserDevolucao.getDate());
            agendamentoEquipamento.setDataEmprestimo(jDateChooserEmprestimo.getDate());
            agendamentoEquipamento.setStatus((String) jcbStatus.getSelectedItem());
            agendamentoEquipamento.setObservacao(jtaObservacao.getText());
            
            
            if (jrbEscola.isSelected()) {
                
                iniciaControleEscola();
                iniciaEscola();
                
                tipoEntid = "ESCOLA";
                escola = (Escola) dao.busca(escola, controleEscola.getCodigoEscola(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                agendamentoEquipamento.setEscola(escola);
                
            } else if (jrbCmei.isSelected()) {
                
                iniciaCmei();
                iniciaControleCmei();
                
                tipoEntid = "CMEI";
                cmei = (Cmei) dao.busca(cmei, controleCmei.getCodigoCmei(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                agendamentoEquipamento.setCmei(cmei);
                
            } else if (jrbOutros.isSelected()) {
                
                iniciaControleOutro();
                iniciaOutro();
                
                tipoEntid = "OUTROS";
                outro = (Outro) dao.busca(outro, controleOutro.getCodigoOutro(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                agendamentoEquipamento.setOutro(outro);
                
            }
            
            agendamentoEquipamento.setTipoEntidade(tipoEntid);

            try {
                iniciaLog();
                geraLog.criaLog(codigoUsuario, "Agendamento de Equipamento", "Tentou Salvar para " + agendamentoEquipamento.getTipoEntidade() + " " + jcbNomeEntidade.getSelectedItem().toString());
            } catch (IOException ex) {
                Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            dao.inserir(agendamentoEquipamento, 7, codigoUsuario);
            
            for (int i = 0; i < listaAgendamentoEquipamentoItens.size(); i++) {
                
                agendamentoEquipamentoItens = null;
                equipamento = null;
                
                iniciaAgendamentoEquipamentoItens();
                iniciaEquipamento();
                
                agendamentoEquipamentoItens.setAgendamentoEquipamento(agendamentoEquipamento);
                equipamento = (Equipamento) listaAgendamentoEquipamentoItens.get(i);
                agendamentoEquipamentoItens.setEquipamento(equipamento);
                
                dao.inserir(agendamentoEquipamentoItens, 0, codigoUsuario);
                
            }
            
            cancelar();

        } else {
            
            iniciaClasseGeral();
            classeGeral.msgAtencao("Complete os Campos Obrigatórios, destacados em Azul!");
            
        }

    }

    public void atualizar() {

        if (jcbNomeEntidade.getSelectedIndex() != 0 && !jDateChooserEmprestimo.getDate().equals(null)
                && !jDateChooserDevolucao.getDate().equals(null)) {

            iniciaDao();
            iniciaAgendamentoEquipamento();
            iniciaControleEquipamento();
            iniciaListaAgendamentoEquipamentoItens();
            
            agendamentoEquipamento.setAnoAgendamento(versao.getAno());
            
            for (int i = 0; i < modelo.getRowCount(); i++) {
                
                iniciaEquipamento();
                
                equipamento = (Equipamento) dao.busca(equipamento, Integer.valueOf((String) jtbAgendamentoEquipamento.getValueAt(i, 3)));
                dao.encerraSessao();
                listaAgendamentoEquipamentoItens.add(equipamento);
                
            }
            
            //agendamentoEquipamento.setListaAgendamentoEquipamentoItens(listaAgendamentoEquipamentoItens);
            
            iniciaUsuario();
            usuario = (Usuario) dao.buscaUsuario(0, jcbNomeUsuario.getSelectedItem().toString(), "");
            agendamentoEquipamento.setUsuario(usuario);
            usuario = null;
            
            agendamentoEquipamento.setNomeSolicitante(jtfNomeSolicitante.getText());
            agendamentoEquipamento.setDataDevolucaoReal(jDateChooserDevolucaoReal.getDate());
            agendamentoEquipamento.setDataDevolucao(jDateChooserDevolucao.getDate());
            agendamentoEquipamento.setDataEmprestimo(jDateChooserEmprestimo.getDate());
            agendamentoEquipamento.setStatus((String) jcbStatus.getSelectedItem());
            agendamentoEquipamento.setObservacao(jtaObservacao.getText());
            
            
            
            if (jrbEscola.isSelected()) {
                
                iniciaControleEscola();
                iniciaEscola();
            
                tipoEntid = "ESCOLA";
                escola = (Escola) dao.busca(escola, controleEscola.getCodigoEscola(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                agendamentoEquipamento.setEscola(escola);
                
            } else if (jrbCmei.isSelected()) {
                
                iniciaCmei();
                iniciaControleCmei();
                
                tipoEntid = "CMEI";
                cmei = (Cmei) dao.busca(cmei, controleCmei.getCodigoCmei(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                agendamentoEquipamento.setCmei(cmei);
                
            } else if (jrbOutros.isSelected()) {
                
                iniciaControleOutro();
                iniciaOutro();
                
                tipoEntid = "OUTROS";
                outro = (Outro) dao.busca(outro, controleOutro.getCodigoOutro(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                agendamentoEquipamento.setOutro(outro);
                
            }
            
            agendamentoEquipamento.setTipoEntidade(tipoEntid);
            
            try {
                iniciaLog();
                geraLog.criaLog(codigoUsuario, "Agendamento de Equipamento", "Tentou Atualizar Código: " + agendamentoEquipamento.getCodigoAgendamentoEquipamento() + " do(a) " + agendamentoEquipamento.getTipoEntidade() + " " + jcbNomeEntidade.getSelectedItem().toString());
            } catch (IOException ex) {
                Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            dao.atualizar(agendamentoEquipamento, 7, codigoUsuario);
            
            cancelar();

        } else {
            
            iniciaClasseGeral();
            classeGeral.msgAtencao("Complete os Campos Obrigatórios, destacados em Azul!");
            
        }

    }

    public void excluir() {

        iniciaClasseGeral();

        if (classeGeral.msgConfirma("Deseja excluir o Agendamento?")) {

            iniciaDao();
            iniciaAgendamentoEquipamento();
            
            try {
                iniciaLog();
                geraLog.criaLog(codigoUsuario, "Agendamento de Equipamento", "Tentou Excluir Código: " + agendamentoEquipamento.getCodigoAgendamentoEquipamento() + " do(a) " + agendamentoEquipamento.getTipoEntidade() + " " + jcbNomeEntidade.getSelectedItem().toString());
            } catch (IOException ex) {
                Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            dao.excluir(agendamentoEquipamento, codigoUsuario);
            cancelar();

        }

    }
}
