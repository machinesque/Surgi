/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package visual;

import conexao.Conexao;
import controlador.*;
import dao.DAO;
import excecoes.ExcCadastro;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.text.ParseException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import modelo.AgendamentoOficio;
import modelo.Cmei;
import modelo.DepartamentoDivisaoSetor;
import modelo.Escola;
import modelo.Outro;
import modelo.Permissoes;
import modelo.Usuario;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author luizam
 */
public class JfAgendamentoOficio extends javax.swing.JFrame implements Runnable {

    private static ControleVersao versao = new ControleVersao();
    private AgendamentoOficio agendamentoOficio;
    private ClasseGeral classeGeral;
    private Cmei cmei;
    private ControleCmei controleCmei;
    private ControleEscola controleEscola;
    private ControleImagem controleImagem = new ControleImagem();
    private ControleOutro controleOutro;
    private DAO dao;
    private DepartamentoDivisaoSetor departamentoDivisaoSetor;
    private Escola escola;
    private Formatos formato = new Formatos();
    private Log geraLog;
    private Outro outro;
    private Thread threadAtualizaHora = new Thread(this);
    private Usuario usuario;
    
    private VerificadorDataPeriodo verificadorDataPeriodo;
    private ControleUsuario controleUsuario;
    
    private JdBuscaAgendamentoOficio jdbao;

    private JasperPrint jPrint;
    private JasperViewer jViewer;
    
    private int codigo = 0;
    private int codigoUsuario;
    private String tipoEntid = "";
    private String opcao = "salvar";
    private boolean agendarAgendamentoOficio;
    private boolean colocarEmAtendimentoAgendamentoOficio;
    
    /**
     * Creates new form jfAgendamentoOficio
     */
    public JfAgendamentoOficio() {
        super("Ofício - Agendamento - " + versao.getVersao() + " - " + versao.getAno());
        initComponents();
        
        //Altera icone na barra de titulo
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.getImage("C:/SURGI/imagens/SURGI32x32.png");
        this.setIconImage(img);

        //maximiza tela
        //this.setExtendedState(MAXIMIZED_BOTH);

        //centraliza tela
        setSize(getWidth(), getHeight());
        setLocationRelativeTo(null);

        try {
            jftfHoraSolicitacao.setFormatterFactory(formato.getFormatoHora());
        } catch (ParseException ex) {
            iniciaClasseGeral();
            Logger.getLogger(JfAgendamento.class.getName()).log(Level.SEVERE, null, ex);
            classeGeral.msgErro("Não foi possivel formatar campo de Hora Solicitacao, \n Contate o Administrador!");
        }

        jlbAnoOficio.setText(getAno());
        jDateChooserSolicitacao.setDate(getDateHoje());
        jrbEscola.setSelected(true);

        threadAtualizaHora.start();

        preencheComboEscolas();

        preencheComboUsuarios();
        
        preencheComboSetor();

        setNumeroCaracteres();

        jtfNumeroOficio.setText("OFÍCIO");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgTipoUnidade = new javax.swing.ButtonGroup();
        jpOficio = new javax.swing.JPanel();
        jlbAnoOficio = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtfNumeroOficio = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jspProblemaInformado = new javax.swing.JScrollPane();
        jtaProblemaInformado = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jspProblemaConstatado = new javax.swing.JScrollPane();
        jtaProblemaConstatado = new javax.swing.JTextArea();
        jcbStatus = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jcbNomeEntidade = new javax.swing.JComboBox();
        jrbEscola = new javax.swing.JRadioButton();
        jrbCmei = new javax.swing.JRadioButton();
        jDateChooserSolicitacao = new com.toedter.calendar.JDateChooser();
        jDateChooserResolucao = new com.toedter.calendar.JDateChooser();
        jrbOutros = new javax.swing.JRadioButton();
        jcbNomeUsuario = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jcbNomeDepartamentoDivisaoSetorDestinado = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jDateChooserRecolhimento = new com.toedter.calendar.JDateChooser();
        jLabel13 = new javax.swing.JLabel();
        jftfHoraSolicitacao = new javax.swing.JFormattedTextField();
        jpBotoes = new javax.swing.JPanel();
        jbSalvar = new javax.swing.JButton();
        jbBuscar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbAlterar = new javax.swing.JButton();
        jbImprimir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpOficio.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());

        jlbAnoOficio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlbAnoOficio.setText("Ano Ofício");
        jlbAnoOficio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Tipo Entidade: ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Unidade: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Data Solicitação: ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Data Resolução: ");

        jtfNumeroOficio.setBackground(new java.awt.Color(204, 204, 255));
        jtfNumeroOficio.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfNumeroOficio.setText("OFÍCIO");
        jtfNumeroOficio.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtfNumeroOficio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfNumeroOficioFocusLost(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Nº Ofício: ");

        jtaProblemaInformado.setBackground(new java.awt.Color(204, 204, 255));
        jtaProblemaInformado.setColumns(20);
        jtaProblemaInformado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtaProblemaInformado.setLineWrap(true);
        jtaProblemaInformado.setRows(5);
        jtaProblemaInformado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtaProblemaInformado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtaProblemaInformadoFocusLost(evt);
            }
        });
        jspProblemaInformado.setViewportView(jtaProblemaInformado);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Problema Informado: ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Problema Constatado/Solução: ");

        jtaProblemaConstatado.setColumns(20);
        jtaProblemaConstatado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtaProblemaConstatado.setLineWrap(true);
        jtaProblemaConstatado.setRows(5);
        jtaProblemaConstatado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtaProblemaConstatado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtaProblemaConstatadoFocusLost(evt);
            }
        });
        jspProblemaConstatado.setViewportView(jtaProblemaConstatado);

        jcbStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AGENDADO", "EM ATENDIMENTO", "ATENDIDO" }));
        jcbStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Status: ");

        jcbNomeEntidade.setBackground(new java.awt.Color(204, 204, 255));
        jcbNomeEntidade.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbNomeEntidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jcbNomeEntidade.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 255), null, new java.awt.Color(204, 204, 255), new java.awt.Color(204, 204, 255)));

        btgTipoUnidade.add(jrbEscola);
        jrbEscola.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbEscola.setSelected(true);
        jrbEscola.setText("Escola");
        jrbEscola.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jrbEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbEscolaActionPerformed(evt);
            }
        });

        btgTipoUnidade.add(jrbCmei);
        jrbCmei.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbCmei.setText("Cmei");
        jrbCmei.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jrbCmei.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCmeiActionPerformed(evt);
            }
        });

        jDateChooserSolicitacao.setBackground(new java.awt.Color(204, 204, 255));
        jDateChooserSolicitacao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 255), new java.awt.Color(204, 204, 255), null, new java.awt.Color(204, 204, 255)));
        jDateChooserSolicitacao.setEnabled(false);
        jDateChooserSolicitacao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jDateChooserResolucao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDateChooserResolucao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btgTipoUnidade.add(jrbOutros);
        jrbOutros.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbOutros.setText("Outros");
        jrbOutros.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jrbOutros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbOutrosActionPerformed(evt);
            }
        });

        jcbNomeUsuario.setBackground(new java.awt.Color(204, 204, 255));
        jcbNomeUsuario.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbNomeUsuario.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 255), null, new java.awt.Color(204, 204, 255), new java.awt.Color(204, 204, 255)));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Usuário: ");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Depto./Divisão/Setor Destinado: ");

        jcbNomeDepartamentoDivisaoSetorDestinado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbNomeDepartamentoDivisaoSetorDestinado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 255), null, new java.awt.Color(204, 204, 255), new java.awt.Color(204, 204, 255)));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Data Recolhimento: ");

        jDateChooserRecolhimento.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDateChooserRecolhimento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setText("Hora Solicitação: ");

        jftfHoraSolicitacao.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jftfHoraSolicitacao.setEnabled(false);
        jftfHoraSolicitacao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jpOficioLayout = new javax.swing.GroupLayout(jpOficio);
        jpOficio.setLayout(jpOficioLayout);
        jpOficioLayout.setHorizontalGroup(
            jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOficioLayout.createSequentialGroup()
                .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpOficioLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel3)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbNomeDepartamentoDivisaoSetorDestinado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jspProblemaConstatado)
                            .addComponent(jspProblemaInformado)))
                    .addGroup(jpOficioLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel10)
                            .addComponent(jLabel13))
                        .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpOficioLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jpOficioLayout.createSequentialGroup()
                                        .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jpOficioLayout.createSequentialGroup()
                                                .addComponent(jftfHoraSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel4))
                                            .addGroup(jpOficioLayout.createSequentialGroup()
                                                .addComponent(jDateChooserSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel11)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jDateChooserRecolhimento, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jDateChooserResolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jcbNomeUsuario, 0, 753, Short.MAX_VALUE)
                                    .addComponent(jcbNomeEntidade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpOficioLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jtfNumeroOficio, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jpOficioLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jlbAnoOficio))
                    .addGroup(jpOficioLayout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jrbEscola)
                        .addGap(14, 14, 14)
                        .addComponent(jrbCmei)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jrbOutros))
                    .addGroup(jpOficioLayout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, Short.MAX_VALUE))
        );
        jpOficioLayout.setVerticalGroup(
            jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOficioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlbAnoOficio)
                .addGap(18, 18, 18)
                .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jrbCmei)
                    .addComponent(jrbOutros)
                    .addComponent(jrbEscola))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbNomeUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcbNomeEntidade, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(jDateChooserSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jDateChooserRecolhimento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(jDateChooserResolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftfHoraSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtfNumeroOficio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel10)
                    .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpOficioLayout.createSequentialGroup()
                        .addComponent(jspProblemaInformado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcbNomeDepartamentoDivisaoSetorDestinado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addGroup(jpOficioLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(195, 195, 195)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpOficioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jspProblemaConstatado, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(22, 22, 22))
        );

        jpBotoes.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());

        jbSalvar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/OK.png"))); // NOI18N
        jbSalvar.setText("Salvar");
        jbSalvar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbBuscar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/pesquisar.png"))); // NOI18N
        jbBuscar.setText("Buscar");
        jbBuscar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbCancelar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cancelar.png"))); // NOI18N
        jbCancelar.setText("Cancelar");
        jbCancelar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jbExcluir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/delete.png"))); // NOI18N
        jbExcluir.setText("Excluir");
        jbExcluir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbExcluir.setEnabled(false);
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbAlterar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/reload.png"))); // NOI18N
        jbAlterar.setText("Alterar");
        jbAlterar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbAlterar.setEnabled(false);
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarActionPerformed(evt);
            }
        });

        jbImprimir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imprimir.png"))); // NOI18N
        jbImprimir.setText("Imprimir");
        jbImprimir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbImprimir.setEnabled(false);
        jbImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpBotoesLayout = new javax.swing.GroupLayout(jpBotoes);
        jpBotoes.setLayout(jpBotoesLayout);
        jpBotoesLayout.setHorizontalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBotoesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpBotoesLayout.setVerticalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpOficio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jpOficio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtfNumeroOficioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfNumeroOficioFocusLost
        jtfNumeroOficio.setText(jtfNumeroOficio.getText().toUpperCase());
    }//GEN-LAST:event_jtfNumeroOficioFocusLost

    private void jtaProblemaInformadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtaProblemaInformadoFocusLost
        jtaProblemaInformado.setText(jtaProblemaInformado.getText().toUpperCase());
    }//GEN-LAST:event_jtaProblemaInformadoFocusLost

    private void jtaProblemaConstatadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtaProblemaConstatadoFocusLost
        jtaProblemaConstatado.setText(jtaProblemaConstatado.getText().toUpperCase());
    }//GEN-LAST:event_jtaProblemaConstatadoFocusLost

    private void jrbEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbEscolaActionPerformed

        if (jrbEscola.isSelected()) {
            preencheComboEscolas();
            tipoEntid = "ESCOLA";
        }
    }//GEN-LAST:event_jrbEscolaActionPerformed

    private void jrbCmeiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCmeiActionPerformed

        if (jrbCmei.isSelected()) {
            preencheComboCmeis();
            tipoEntid = "CMEI";
        }
    }//GEN-LAST:event_jrbCmeiActionPerformed

    private void jrbOutrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbOutrosActionPerformed

        if (jrbOutros.isSelected()) {
            preencheComboOutros();
            tipoEntid = "OUTROS";
        }
    }//GEN-LAST:event_jrbOutrosActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed

        iniciaVerificadorDataPeriodo();

        if (jDateChooserResolucao.getDate() != null) {

            if (verificadorDataPeriodo.verificaDatas(jDateChooserSolicitacao.getDate(), jDateChooserResolucao.getDate())) {

                iniciaClasseGeral();
                classeGeral.msgAtencao("Data de Resolução não é válida com relação a Data de Solicitação!'");
                jDateChooserResolucao.setDate(null);

            }
        }

        if (verificaResolucao()) {

            iniciaClasseGeral();
            classeGeral.msgAtencao("Preencha os campos 'Data Resolução', 'Atendido por' ou 'Problema constatado/solução'!");

        } else {

            if (opcao.equals("salvar")) {

                if (jcbNomeEntidade.getSelectedIndex() != 0 && !jtfNumeroOficio.getText().isEmpty() && !jtaProblemaInformado.getText().isEmpty()) {
                    
                    if (!verificaAgendamentoExistente().isEmpty()) {

                        iniciaClasseGeral();

                        if (classeGeral.msgConfirmaOpcao("Já existe um Agendamento Cadastrastrado!\n Deseja Salvar/Criar um novo Agendamento? \n Clique em 'NÃO' para buscar e complementar o Agendamento já existente! \n Clique em 'SIM' para Salvar/Criar o novo agendamento!")) {
                            salvar();
                            opcao = "salvar";
                        }

                    } else {
                        salvar();
                        opcao = "salvar";
                    }
                    
                } else {
                    iniciaClasseGeral();
                    classeGeral.msgAtencao("Complete os Campos Obrigatórios, destacados em Azul!");
                }   
                
            } else if (opcao.equals("alterar")) {

                if (jcbNomeEntidade.getSelectedIndex() != 0 && !jtfNumeroOficio.getText().isEmpty() && !jtaProblemaInformado.getText().isEmpty()) {
                    
                    atualizar();
                    opcao = "salvar";
                    
                } else {
                    iniciaClasseGeral();
                    classeGeral.msgAtencao("Complete os Campos Obrigatórios, destacados em Azul!");
                }

            }

        }
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed

        if (jdbao == null) {
            jdbao = new JdBuscaAgendamentoOficio(null, true);
        }

        jdbao.setCodigoUsuario(codigoUsuario);
        jdbao.setVisible(true);

        setAgendamentoOficiolBuscado(jdbao.getAgendamentoOficio());
        jdbao.setAgendamentoOficio();
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        cancelar();
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        excluir();
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarActionPerformed

        abilitaCampos();

        jbAlterar.setEnabled(false);

        if (!jcbStatus.getSelectedItem().equals("ATENDIDO")) {
            iniciaDao();
            iniciaUsuario();
            usuario = (Usuario) dao.busca(usuario, codigoUsuario);
            dao.encerraSessao();
            jcbNomeDepartamentoDivisaoSetorDestinado.setSelectedItem(usuario.getNomeUsuario());
            usuario = null;
        }

        opcao = "alterar";

        jbSalvar.setEnabled(true);
    }//GEN-LAST:event_jbAlterarActionPerformed

    private void jbImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImprimirActionPerformed

        //ADOGeral ag = new ADOGeral();
        Conexao conexao = new Conexao();
        HashMap parametros = new HashMap();
        try {
            //System.out.println(codigoRegistro);
            //parametros.put("titulo", "Titulo Relatorio");
            parametros.put("codigoAgendado", new Integer(codigo));
            //parametros.put("tipoAgendamento", new String("AGENDAMENTO PONTO DIGITAL"));
            //parametros.put("codigo", lista.get(0).getNome();
            //ADOGeral.conectar();
            conexao.getConexao();
        } catch (ExcCadastro ex) {
            Logger.getLogger(JfImpressosAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }

        //        JRDataSource jrds = new JRBeanCollectionDataSource(lista);

        try {

            switch (tipoEntid) {
                
                case "CMEI":
                    jPrint = JasperFillManager.fillReport("AgendamentoOficioCmei.jasper", parametros, conexao.getConexao());
                    break;
                    
                case "ESCOLA":
                    jPrint = JasperFillManager.fillReport("AgendamentoOficioEscola.jasper", parametros, conexao.getConexao());
                    break;
                    
                case "OUTROS":
                    jPrint = JasperFillManager.fillReport("AgendamentoOficioOutro.jasper", parametros, conexao.getConexao());
                    break;
                
            }  
            
            //jReport = JasperCompileManager.compileReport("E:/LUIZ/PROJETOS JAVA/CORPORATIVO/m2GestaoClinicas/FichaPaciente.jrxml");
            //jPrint = JasperFillManager.fillReport("C:/m2GestaoClinicas/FichaPaciente.jasper", parametros, ADOGeral.getConexao());
            //jPrint = JasperFillManager.fillReport("PontoDigital.jasper", parametros, conexao.getConexao());
            //jPrint = JasperFillManager.fillReport(jReport, parametros, jrds);

            //if (!(jViewer == null)) {
            //jViewer = new JasperViewer(jPrint, false);
            //jViewer.setExtendedState(JFrame.MAXIMIZED_BOTH);
            jViewer.viewReport(jPrint, false);
            //}

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jbImprimirActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        fechar();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jfAgendamentoOficio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jfAgendamentoOficio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jfAgendamentoOficio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jfAgendamentoOficio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        /*java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new jfAgendamentoOficio().setVisible(true);
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgTipoUnidade;
    private com.toedter.calendar.JDateChooser jDateChooserRecolhimento;
    private com.toedter.calendar.JDateChooser jDateChooserResolucao;
    private com.toedter.calendar.JDateChooser jDateChooserSolicitacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton jbAlterar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbImprimir;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JComboBox jcbNomeDepartamentoDivisaoSetorDestinado;
    private javax.swing.JComboBox jcbNomeEntidade;
    private javax.swing.JComboBox jcbNomeUsuario;
    private javax.swing.JComboBox jcbStatus;
    private javax.swing.JFormattedTextField jftfHoraSolicitacao;
    private javax.swing.JLabel jlbAnoOficio;
    private javax.swing.JPanel jpBotoes;
    private javax.swing.JPanel jpOficio;
    private javax.swing.JRadioButton jrbCmei;
    private javax.swing.JRadioButton jrbEscola;
    private javax.swing.JRadioButton jrbOutros;
    private javax.swing.JScrollPane jspProblemaConstatado;
    private javax.swing.JScrollPane jspProblemaInformado;
    private javax.swing.JTextArea jtaProblemaConstatado;
    private javax.swing.JTextArea jtaProblemaInformado;
    private javax.swing.JTextField jtfNumeroOficio;
    // End of variables declaration//GEN-END:variables

//Outros Metodos ===========================================================================================================================================
    public void fechar() {

        if (jcbNomeEntidade.getSelectedIndex() != 0 || !jtfNumeroOficio.getText().equals("OFÍCIO") || !jtaProblemaInformado.getText().isEmpty() || !jtaProblemaConstatado.getText().isEmpty()) {

            iniciaClasseGeral();
            classeGeral.msgAtencao("Cancele ou Salve o Agendamento\n de Ofício em Edição!");

        } else {

            dao = null;
            cancelar();
            this.dispose();
        }
    }

    public void cancelar() {

        jrbEscola.setSelected(true);
        preencheComboEscolas();
        jcbNomeEntidade.setSelectedIndex(0);
        jDateChooserSolicitacao.setDate(getDateHoje());
        jDateChooserResolucao.setDate(null);
        jDateChooserRecolhimento.setDate(null);
        jtaProblemaInformado.setText("");
        jtaProblemaConstatado.setText("");
        jtfNumeroOficio.setText("OFÍCIO");
        jcbStatus.setSelectedIndex(0);

        preencheComboUsuarios();
        preencheComboSetor();

        abilitaCampos();

        jcbNomeUsuario.setSelectedItem(controleUsuario.getNomeUsuario(codigoUsuario));
        jcbNomeDepartamentoDivisaoSetorDestinado.setSelectedItem(controleUsuario.getNomeUsuario(codigoUsuario));

        desabilitaBotoes();

        agendamentoOficio = null;
        cmei = null;
        departamentoDivisaoSetor = null;
        escola = null;
        outro = null;
        usuario = null;
        
        opcao = "salvar";
        codigo = 0;
        
    }

    public void abilitaCampos() {

        jrbEscola.setEnabled(true);
        jrbCmei.setEnabled(true);
        jrbOutros.setEnabled(true);
        jcbNomeEntidade.setEnabled(true);
        jDateChooserRecolhimento.setEnabled(true);
        jDateChooserResolucao.setEnabled(true);
        jtaProblemaInformado.setEditable(true);
        jtaProblemaConstatado.setEditable(true);
        jtfNumeroOficio.setEditable(true);
        jcbStatus.setEnabled(true);
        jcbNomeUsuario.setEnabled(true);
        jcbNomeDepartamentoDivisaoSetorDestinado.setEnabled(true);

    }
    
    public void desabilitaCampos() {
        
        jrbEscola.setEnabled(false);
        jrbCmei.setEnabled(false);
        jrbOutros.setEnabled(false);
        jcbNomeEntidade.setEnabled(false);
        jDateChooserSolicitacao.setEnabled(false);
        jDateChooserRecolhimento.setEnabled(false);
        jDateChooserResolucao.setEnabled(false);
        jtaProblemaInformado.setEditable(false);
        jtaProblemaConstatado.setEditable(false);
        jtfNumeroOficio.setEditable(false);
        jcbStatus.setEnabled(false);
        jcbNomeUsuario.setEnabled(false);
        jcbNomeDepartamentoDivisaoSetorDestinado.setEnabled(false);
        
    }

    public void abilitaBotoes() {

        jbCancelar.setEnabled(true);
        jbBuscar.setEnabled(true);
        jbImprimir.setEnabled(true);

        if (agendarAgendamentoOficio == true) {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(true);
            jbAlterar.setEnabled(true);
        } else {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        }

    }

    public void desabilitaBotoes() {

        jbCancelar.setEnabled(true);
        jbBuscar.setEnabled(true);
        jbImprimir.setEnabled(false);

        if (agendarAgendamentoOficio == true) {
            jbSalvar.setEnabled(true);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        } else {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        }

    }

    public void preencheComboEscolas() {

        iniciaDao();
        
        List listaEscolas = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaEscolas = dao.listarEscolas(0, "", "");

        for (int i = 0; i < listaEscolas.size(); i++) {
            iniciaEscola();
            escola = (Escola) listaEscolas.get(i);
            jcbNomeEntidade.addItem(escola.getNomeEscola());
        }

    }

    public void preencheComboCmeis() {

        iniciaDao();
        
        List listaCmeis = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaCmeis = dao.listarCmeis(0, "", "");

        for (int i = 0; i < listaCmeis.size(); i++) {
            iniciaCmei();
            cmei = (Cmei) listaCmeis.get(i);
            jcbNomeEntidade.addItem(cmei.getNomeCmei());
        }
    }

    public void preencheComboOutros() {

        iniciaDao();
        
        List listaOutros = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaOutros = dao.listarOutros(0, "", "");

        for (int i = 0; i < listaOutros.size(); i++) {
            iniciaOutro();
            outro = (Outro) listaOutros.get(i);
            jcbNomeEntidade.addItem(outro.getNomeOutro());
        }

    }

    public void preencheComboUsuarios() {

        iniciaDao();
        
        List listaUsuarios = new ArrayList();

        jcbNomeUsuario.removeAllItems();

        listaUsuarios = dao.listarUsuarios(0, "", "", false);

        for (int i = 0; i < listaUsuarios.size(); i++) {
            iniciaUsuario();
            usuario = (Usuario) listaUsuarios.get(i);
            jcbNomeUsuario.addItem(usuario.getNomeUsuario());
        }

    }
    
    public void preencheComboSetor() {
        
        iniciaDao();
        List listaDeptoDivSet = new ArrayList();

        jcbNomeDepartamentoDivisaoSetorDestinado.removeAllItems();

        listaDeptoDivSet = dao.listarDepartamentoDivisaoSetor(0, "");

        for (int i = 0; i < listaDeptoDivSet.size(); i++) {
            iniciaDepartamentoDivisaoSetor();
            departamentoDivisaoSetor = (DepartamentoDivisaoSetor) listaDeptoDivSet.get(i);
            jcbNomeDepartamentoDivisaoSetorDestinado.addItem(departamentoDivisaoSetor.getNomeDepartamentoDivisaoSetor());
        }
        
    }
    
    public void preencheComboStatus() {
        
        iniciaDao();
        
        jcbStatus.removeAllItems();
        
        if (colocarEmAtendimentoAgendamentoOficio) {
            jcbStatus.addItem("AGENDADO");
            jcbStatus.addItem("EM ATENDIMENTO");
            jcbStatus.addItem("ATENDIDO");
        } else {
            jcbStatus.addItem("AGENDADO");
            jcbStatus.addItem("ATENDIDO");
        }
        
    }

    public void atualizaHora() {
        jftfHoraSolicitacao.setText(getHoraAtual());
    }

    public void run() {
        for (int i = 0; i == 0; i = 0) {

            try {
                if (opcao.equals("salvar")) {
                    atualizaHora();
                }

                threadAtualizaHora.sleep(60000);
            } catch (InterruptedException ex) {
                Logger.getLogger(JfAgendamento.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

//Geradores, Validadores===========================================================================================================================================
    public void iniciaAgendamentoOficio() {
        
        if (agendamentoOficio == null) {
            agendamentoOficio = new AgendamentoOficio();
        }
        
    }
    
    public void iniciaClasseGeral() {

        if (classeGeral == null) {
            classeGeral = new ClasseGeral();
        }

    }

    public void iniciaCmei() {
        
        if (cmei == null) {
            cmei = new Cmei();
        }
        
    }
    
    public void iniciaControleCmei() {
        
        if (controleCmei == null) {
            controleCmei = new ControleCmei();
        }
        
    }
    
    public void iniciaControleEscola() {
        
        if (controleEscola == null) {
            controleEscola = new ControleEscola();
        }
        
    }
    
    public void iniciaControleOutro() {
        
        if (controleOutro == null) {
            controleOutro = new ControleOutro();
        }
        
    }
    
    public void iniciaControleUsuario() {
        
        if (controleUsuario == null) {
            controleUsuario = new ControleUsuario();
        }
        
    }
    
    public void iniciaDao() {

        if (dao == null) {
            dao = new DAO();
        }

    }
    
    public void iniciaDepartamentoDivisaoSetor() {
        
        if (departamentoDivisaoSetor == null) {
            departamentoDivisaoSetor = new DepartamentoDivisaoSetor();
        }
        
    }
    
    public void iniciaEscola() {
        
        if (escola == null) {
            escola = new Escola();
        }
        
    }
    
    public void iniciaLog() {
        
        if (geraLog == null) {
            geraLog = new Log();
        }
        
    }
    
    public void iniciaOutro() {
        
        if (outro == null) {
            outro = new Outro();
        }
        
    }
    
    public void iniciaUsuario() {
        
        if (usuario == null) {
            usuario = new Usuario();
        }
        
    }
    
    private void iniciaVerificadorDataPeriodo() {
        
        if (verificadorDataPeriodo == null) {
            verificadorDataPeriodo = new VerificadorDataPeriodo();
        }
        
    }
    
    public String verificaAgendamentoExistente() {

        iniciaDao();
        
        int codigoCmei = 0;
        int codigoEscola = 0;
        int codigoOutro = 0;
        String retorno;

        switch (tipoEntid) {
            
            case "CMEI":
                iniciaControleCmei();
                codigoCmei = controleCmei.getCodigoCmei(jcbNomeEntidade.getSelectedItem().toString());
                break;
                
            case "ESCOLA":
                iniciaControleEscola();
                codigoEscola = controleEscola.getCodigoEscola(jcbNomeEntidade.getSelectedItem().toString());
                break;
                
            case "OUTROS":
                iniciaControleOutro();
                codigoOutro = controleOutro.getCodigoOutro(jcbNomeEntidade.getSelectedItem().toString());
                break;    
            
        }
        
        retorno = dao.verificarAgendamentoOficioExistente(codigoCmei, codigoEscola, codigoOutro, tipoEntid, "AGENDADO");

        return retorno;

    }

    public boolean verificaResolucao() {

        if (jDateChooserResolucao.getDate() != null || jcbStatus.getSelectedItem().equals("ATENDIDO")) {

            int contaResolucao = 0;

            if (!jcbStatus.getSelectedItem().equals("ATENDIDO")) {
                contaResolucao += 1;
            }

            if (jDateChooserResolucao.getDate() == null) {
                contaResolucao += 1;
            }

            if (jcbNomeDepartamentoDivisaoSetorDestinado.getSelectedIndex() == 0) {
                contaResolucao += 1;
            }

            if (jtaProblemaConstatado.getText().equals("")) {
                contaResolucao += 1;
            }

            if (contaResolucao > 0) {
                return true;
            } else {
                return false;
            }
            
        } else {
            return false;
        }

    }

//Getters and Setters===========================================================================================================================================
    public Date getDateHoje() {

        GregorianCalendar calendar = new GregorianCalendar();
        Date data = calendar.getTime();

        return data;

    }

    public String getHoraAtual() {

        GregorianCalendar calendar = new GregorianCalendar();
        Date data = calendar.getTime();

        String hora;
        String minuto;

        if (data.getHours() < 10) {
            hora = "0" + data.getHours();
        } else {
            hora = String.valueOf(data.getHours());
        }

        if (data.getMinutes() < 10) {
            minuto = "0" + data.getMinutes();
        } else {
            minuto = String.valueOf(data.getMinutes());
        }

        return hora + minuto;

    }

    public String getAno() {

        return "Ano de " + versao.getAno();

    }

    public DefaultFormatterFactory getFormatoData() throws ParseException {

        MaskFormatter comFoco = null;

        try {
            comFoco = new MaskFormatter("##/##/####"); // passa data para o formato [05/05/2010]
        } catch (ParseException pe) {
        }

        DefaultFormatterFactory factory = new DefaultFormatterFactory(comFoco);
        return factory;

    }

    public void setNumeroCaracteres() {

        jtaProblemaInformado.setDocument(new FixedLengthDocument(400));
        jtaProblemaConstatado.setDocument(new FixedLengthDocument(400));
        jtfNumeroOficio.setDocument(new FixedLengthDocument(60));

    }

    public int getCodigoUsuario() {
        return codigoUsuario;
    }

    public void setCodigoUsuario(int codigoUsuario) {
        iniciaControleUsuario();
        this.codigoUsuario = codigoUsuario;
        getPermissoes();
        jcbNomeUsuario.setSelectedItem(controleUsuario.getNomeUsuario(codigoUsuario));
        jcbNomeDepartamentoDivisaoSetorDestinado.setSelectedItem(controleUsuario.getNomeUsuario(codigoUsuario));
        desabilitaBotoes();
    }

    public void getPermissoes() {
        Permissoes permissoes;
        iniciaDao();
        //DAO dao = new DAO();

        permissoes = (Permissoes) dao.buscaPermissoes(getCodigoUsuario());

        agendarAgendamentoOficio = permissoes.isAgendarAgendamentoOficio();
        colocarEmAtendimentoAgendamentoOficio = permissoes.isColocarEmAtendimentoAgendamentoOficio();
        
    }

    public void setAgendamentoOficiolBuscado(AgendamentoOficio agendamentoOficioBuscado) {

        if (agendamentoOficioBuscado == null) {
        } else {
            
            iniciaAgendamentoOficio();

            if (agendamentoOficioBuscado.getTipoEntidade().equals("ESCOLA")) {
                
                jrbEscola.setSelected(true);
                tipoEntid = "ESCOLA";
                preencheComboEscolas();
                jcbNomeEntidade.setSelectedItem(agendamentoOficioBuscado.getEscola().getNomeEscola());
                
            } else if (agendamentoOficioBuscado.getTipoEntidade().equals("CMEI")) {
                
                jrbCmei.setSelected(true);
                tipoEntid = "CMEI";
                preencheComboCmeis();
                jcbNomeEntidade.setSelectedItem(agendamentoOficioBuscado.getCmei().getNomeCmei());
                
            } else if (agendamentoOficioBuscado.getTipoEntidade().equals("OUTROS")) {
                
                jrbOutros.setSelected(true);
                tipoEntid = "OUTROS";
                preencheComboOutros();
                jcbNomeEntidade.setSelectedItem(agendamentoOficioBuscado.getOutro().getNomeOutro());
                
            }
            
            preencheComboUsuarios();
            preencheComboSetor();

            jtaProblemaInformado.setText(agendamentoOficioBuscado.getProblemaInformado());
            jtaProblemaConstatado.setText(agendamentoOficioBuscado.getProblemaConstatado());
            jtfNumeroOficio.setText(agendamentoOficioBuscado.getNumeroOficio());
            jcbStatus.setSelectedItem(agendamentoOficioBuscado.getStatus());
            
            iniciaUsuario();
            usuario = (Usuario) agendamentoOficioBuscado.getUsuario();
            jcbNomeUsuario.setSelectedItem(usuario.getNomeUsuario());
            
            iniciaDepartamentoDivisaoSetor();
            departamentoDivisaoSetor = (DepartamentoDivisaoSetor) agendamentoOficioBuscado.getDepartamentoDivisaoSetor();
            jcbNomeDepartamentoDivisaoSetorDestinado.setSelectedItem(departamentoDivisaoSetor.getNomeDepartamentoDivisaoSetor());
            
            jDateChooserSolicitacao.setDate(agendamentoOficioBuscado.getDataSolicitacao());
            jDateChooserResolucao.setDate(agendamentoOficioBuscado.getDataResolucao());

            codigo = agendamentoOficioBuscado.getCodigoAgendamentoOficio();//para testar comando excluir
            agendamentoOficio = agendamentoOficioBuscado;
            agendamentoOficio.setCodigoAgendamentoOficio(codigo);

            desabilitaCampos();

            abilitaBotoes();

        }
    }

//Metodos DAO===========================================================================================================================================
    public void salvar() {

        iniciaDao();
        iniciaAgendamentoOficio();
        iniciaDepartamentoDivisaoSetor();

        agendamentoOficio.setNumeroOficio(jtfNumeroOficio.getText());
        agendamentoOficio.setProblemaInformado(jtaProblemaInformado.getText());
        agendamentoOficio.setDataResolucao(jDateChooserResolucao.getDate());
        agendamentoOficio.setDataSolicitacao(jDateChooserSolicitacao.getDate());
        agendamentoOficio.setDataRecolhimento(jDateChooserRecolhimento.getDate());
        agendamentoOficio.setAnoAgendamento(versao.getAno());
        agendamentoOficio.setStatus(jcbStatus.getSelectedItem().toString());
        
        iniciaUsuario();
        usuario = (Usuario) dao.buscaUsuario(0, jcbNomeUsuario.getSelectedItem().toString(), "");
        agendamentoOficio.setUsuario(usuario);
        
        departamentoDivisaoSetor = (DepartamentoDivisaoSetor) dao.buscaDepartamentoDivisaoSetor(0, jcbNomeDepartamentoDivisaoSetorDestinado.getSelectedItem().toString());
        agendamentoOficio.setDepartamentoDivisaoSetor(departamentoDivisaoSetor);
        
        agendamentoOficio.setProblemaConstatado(jtaProblemaConstatado.getText());
        agendamentoOficio.setHoraSolicitacao(jftfHoraSolicitacao.getText());
        
        if (jrbEscola.isSelected() == true) {
            
            iniciaEscola();
            agendamentoOficio.setTipoEntidade("ESCOLA");
            escola = (Escola) dao.buscaEscola(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamentoOficio.setEscola(escola);
            
        } else if (jrbCmei.isSelected() == true) {
            
            iniciaCmei();
            agendamentoOficio.setTipoEntidade("CMEI");
            cmei = (Cmei) dao.buscaCmei(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamentoOficio.setCmei(cmei);
            
        } else if (jrbOutros.isSelected() == true) {
            
            iniciaOutro();
            agendamentoOficio.setTipoEntidade("OUTROS");
            outro = (Outro) dao.buscaOutro(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamentoOficio.setOutro(outro);
            
        }

        try {
            iniciaLog();
            geraLog.criaLog(codigoUsuario, "Ofício", "Tentou Salvar Agendamento de Ofício do(a) " + agendamentoOficio.getTipoEntidade() + " " + jcbNomeEntidade.getSelectedItem().toString());
        } catch (IOException ex) {
            Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        dao.inserir(agendamentoOficio, 7, codigoUsuario);

        cancelar();

    }

    public void atualizar() {

        iniciaDao();
        iniciaAgendamentoOficio();

        agendamentoOficio.setNumeroOficio(jtfNumeroOficio.getText());
        agendamentoOficio.setProblemaInformado(jtaProblemaInformado.getText());
        agendamentoOficio.setDataResolucao(jDateChooserResolucao.getDate());
        agendamentoOficio.setDataRecolhimento(jDateChooserRecolhimento.getDate());
        agendamentoOficio.setDataSolicitacao(jDateChooserSolicitacao.getDate());
        agendamentoOficio.setAnoAgendamento(versao.getAno());
        agendamentoOficio.setStatus((String) jcbStatus.getSelectedItem());
        
        iniciaUsuario();
        usuario = (Usuario) dao.buscaUsuario(0, jcbNomeUsuario.getSelectedItem().toString(), "");
        agendamentoOficio.setUsuario(usuario);
        
        departamentoDivisaoSetor = (DepartamentoDivisaoSetor) dao.buscaDepartamentoDivisaoSetor(0, jcbNomeDepartamentoDivisaoSetorDestinado.getSelectedItem().toString());
        agendamentoOficio.setDepartamentoDivisaoSetor(departamentoDivisaoSetor);
        
        agendamentoOficio.setProblemaConstatado(jtaProblemaConstatado.getText());
        agendamentoOficio.setHoraSolicitacao(jftfHoraSolicitacao.getText());
        
        if (jrbEscola.isSelected() == true) {
            
            iniciaEscola();
            agendamentoOficio.setTipoEntidade("ESCOLA");
            escola = (Escola) dao.buscaEscola(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamentoOficio.setEscola(escola);
            
        } else if (jrbCmei.isSelected() == true) {
            
            iniciaCmei();
            agendamentoOficio.setTipoEntidade("CMEI");
            cmei = (Cmei) dao.buscaCmei(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamentoOficio.setCmei(cmei);
            
        } else if (jrbOutros.isSelected() == true) {
            
            iniciaOutro();
            agendamentoOficio.setTipoEntidade("OUTROS");
            outro = (Outro) dao.buscaOutro(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamentoOficio.setOutro(outro);
            
        }

        try {
            iniciaLog();
            geraLog.criaLog(codigoUsuario, "Ofício", "Tentou Atualizar Agendamento de Ofício Código: " + agendamentoOficio.getCodigoAgendamentoOficio()+ " do(a) " + agendamentoOficio.getTipoEntidade() + " " + jcbNomeEntidade.getSelectedItem().toString());
        } catch (IOException ex) {
            Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        dao.atualizar(agendamentoOficio, 7, codigoUsuario);

        cancelar();

    }

    public void excluir() {

        iniciaClasseGeral();
        iniciaAgendamentoOficio();

        if (classeGeral.msgConfirma("Deseja excluir o Agendamento de Ofício?")) {

            iniciaDao();
            iniciaAgendamentoOficio();
            
            try {
                iniciaLog();
                geraLog.criaLog(codigoUsuario, "Ofício", "Tentou Excluir Agendamento de Ofício Código: " + agendamentoOficio.getCodigoAgendamentoOficio()+ " do(a) " + agendamentoOficio.getTipoEntidade() + " " + jcbNomeEntidade.getSelectedItem().toString());
            } catch (IOException ex) {
                Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            dao.excluir(agendamentoOficio, codigoUsuario);
            cancelar();

        }

    }

}
