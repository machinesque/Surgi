/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jfCadastroUsuario.java
 *
 * Created on 27/01/2010, 09:03:06
 */
package visual;

import controlador.*;
import dao.DAO;
import excecoes.MensagensExcessao;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import modelo.Cartucho;
import modelo.Cmei;
import modelo.EntregaRemanufaturados;
import modelo.EntregaRemanufaturadosItens;
import modelo.Escola;
import modelo.Outro;
import modelo.Permissoes;
import modelo.Recarga;
import modelo.SolicitacaoRecarga;
import modelo.SolicitacaoRemanufatura;
import modelo.SolicitacaoRemanufaturaItens;
import modelo.Usuario;

/**
 *
 * @author luiz
 */
public class JfRecarga extends javax.swing.JFrame implements Runnable {
    
    private static ControleVersao versao = new ControleVersao();
    private Cartucho cartucho;
    private ClasseGeral classeGeral;
    private Cmei cmei;
    private ControleCmei controleCmei;
    private ControleEscola controleEscola;
    private ControleOutro controleOutro;
    private DAO dao;
    private EnviaEmail enviaEmail;
    private EntregaRemanufaturados entregaRemanufaturados;
    private EntregaRemanufaturadosItens entregaRemanufaturadosItens;
    private Escola escola;
    private Formatos formato = new Formatos();
    private Log geraLog;
    private Outro outro;
    private Recarga recarga;
    private SolicitacaoRecarga solicitacaoRecarga;
    private SolicitacaoRemanufatura solicitacaoRemanufatura;
    private SolicitacaoRemanufaturaItens solicitacaoRemanufaturaItens;
    private Usuario usuario;
    private ValidaData validaData;
    private VerificadorDataPeriodo verificadorDataPeriodo;
    
    private MensagensExcessao except;
    private Thread threadAtualizaNumeroSolicitacaoRecarga = new Thread(this);
    private Thread threadAtualizaHora = new Thread(this);
    
    private JdBuscaRecarga jdbr;
    private JfSolicitacaoRecarga jfSolicRecarg;
    
    private List listaModelos = new ArrayList();
    private List listaCodigoBarras = new ArrayList();
    
    private int codigo = 0;
    private int codigoUsuario;
    private int numeroSolicitacao;
    private String tipoEntid = "";
    private String opcao = "salvar";
    private String nomeEntidade = "";
    private boolean permitirRecarga = false;
    private boolean enviarEmailTonerCarregado = false;

    /** Creates new form jfCadastroUsuario */
    public JfRecarga() {
        super("Recarga Cartuchos - " + versao.getVersao() + " - " + versao.getAno());
        initComponents();

        iniciaValidaData();
        //Altera icone na barra de titulo
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.getImage("C:/SURGI/imagens/SURGI32x32.png");
        this.setIconImage(img);

        //centraliza tela
        setSize(getWidth(), getHeight());
        setLocationRelativeTo(null);

        try {
            jftfHoraEntrega.setFormatterFactory(formato.getFormatoHora());
        } catch (ParseException ex) {
            Logger.getLogger(JfAgendamento.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "NÃ£o foi possivel formatar campo de Hora Solicitacao, \n Contate o Administrador!", "Erro", 0, null);
        }
        
        setNumeroCaracteres();

        jtfNumeroRecargas.setEditable(false);
        jDateChooserDataEntrega.setDate(validaData.getDateAtual());
        jrbEscola.setSelected(true);

        preencheComboEscolas();

        jrbOutros.transferFocus();

        threadAtualizaNumeroSolicitacaoRecarga.start();
        threadAtualizaHora.start();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgTipoEntidade = new javax.swing.ButtonGroup();
        jpBotoes = new javax.swing.JPanel();
        jbNovo = new javax.swing.JButton();
        jbSalvar = new javax.swing.JButton();
        jbBuscar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbAlterar = new javax.swing.JButton();
        jbImprimir = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jrbEscola = new javax.swing.JRadioButton();
        jrbCmei = new javax.swing.JRadioButton();
        jrbOutros = new javax.swing.JRadioButton();
        jtfCodigoBarras = new javax.swing.JTextField();
        jtfModeloCartucho = new javax.swing.JTextField();
        jcbNomeEntidade = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jtfNumeroRecargas = new javax.swing.JTextField();
        jDateChooserDataEntrega = new com.toedter.calendar.JDateChooser();
        jDateChooserDataRecarga = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaObservacao = new javax.swing.JTextArea();
        jDateChooserDataDevolucao = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jcheckbCartuchoQueimado = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jftfHoraEntrega = new javax.swing.JFormattedTextField();
        jbFinalizarSoliictacaoRecarga = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpBotoes.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());

        jbNovo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/novo.png"))); // NOI18N
        jbNovo.setText("Novo");
        jbNovo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbNovo.setEnabled(false);
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });

        jbSalvar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/OK.png"))); // NOI18N
        jbSalvar.setText("Salvar");
        jbSalvar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbBuscar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/pesquisar.png"))); // NOI18N
        jbBuscar.setText("Buscar");
        jbBuscar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbCancelar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cancelar.png"))); // NOI18N
        jbCancelar.setText("Cancelar");
        jbCancelar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jbExcluir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/delete.png"))); // NOI18N
        jbExcluir.setText("Excluir");
        jbExcluir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbExcluir.setEnabled(false);
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbAlterar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/reload.png"))); // NOI18N
        jbAlterar.setText("Alterar");
        jbAlterar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbAlterar.setEnabled(false);
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarActionPerformed(evt);
            }
        });

        jbImprimir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imprimir.png"))); // NOI18N
        jbImprimir.setText("Imprimir");
        jbImprimir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbImprimir.setEnabled(false);
        jbImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpBotoesLayout = new javax.swing.GroupLayout(jpBotoes);
        jpBotoes.setLayout(jpBotoesLayout);
        jpBotoesLayout.setHorizontalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBotoesLayout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .addComponent(jbNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpBotoesLayout.setVerticalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel1.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("CÃ³digo de Barras: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Modelo Cartucho: ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Tipo Entidade: ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Unidade: ");

        btgTipoEntidade.add(jrbEscola);
        jrbEscola.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbEscola.setSelected(true);
        jrbEscola.setText("Escola");
        jrbEscola.setEnabled(false);
        jrbEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbEscolaActionPerformed(evt);
            }
        });

        btgTipoEntidade.add(jrbCmei);
        jrbCmei.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbCmei.setText("Cmei");
        jrbCmei.setEnabled(false);
        jrbCmei.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCmeiActionPerformed(evt);
            }
        });

        btgTipoEntidade.add(jrbOutros);
        jrbOutros.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbOutros.setText("Outros");
        jrbOutros.setEnabled(false);
        jrbOutros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbOutrosActionPerformed(evt);
            }
        });

        jtfCodigoBarras.setBackground(new java.awt.Color(204, 204, 255));
        jtfCodigoBarras.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfCodigoBarras.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtfCodigoBarras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtfCodigoBarrasKeyPressed(evt);
            }
        });

        jtfModeloCartucho.setEditable(false);
        jtfModeloCartucho.setBackground(new java.awt.Color(204, 204, 255));
        jtfModeloCartucho.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfModeloCartucho.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtfModeloCartucho.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfModeloCartuchoFocusLost(evt);
            }
        });

        jcbNomeEntidade.setBackground(new java.awt.Color(204, 204, 255));
        jcbNomeEntidade.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbNomeEntidade.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 255), new java.awt.Color(204, 204, 255), null, new java.awt.Color(204, 204, 255)));
        jcbNomeEntidade.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Numero Recargas: ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Data Entrega: ");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Data Recarga: ");

        jtfNumeroRecargas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfNumeroRecargas.setText("0");
        jtfNumeroRecargas.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jDateChooserDataEntrega.setBackground(new java.awt.Color(204, 204, 255));
        jDateChooserDataEntrega.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 255), new java.awt.Color(204, 204, 255), null, new java.awt.Color(204, 204, 255)));
        jDateChooserDataEntrega.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jDateChooserDataRecarga.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDateChooserDataRecarga.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("ObservaÃ§Ã£o: ");

        jtaObservacao.setColumns(20);
        jtaObservacao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtaObservacao.setLineWrap(true);
        jtaObservacao.setRows(5);
        jtaObservacao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtaObservacao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtaObservacaoFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jtaObservacao);

        jDateChooserDataDevolucao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDateChooserDataDevolucao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Data DevoluÃ§Ã£o: ");

        jcheckbCartuchoQueimado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcheckbCartuchoQueimado.setText("Cartucho Queimado");
        jcheckbCartuchoQueimado.setEnabled(false);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Hora Entrega: ");

        jftfHoraEntrega.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jftfHoraEntrega.setEnabled(false);
        jftfHoraEntrega.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jbFinalizarSoliictacaoRecarga.setText("Finalizar SolicitaÃ§Ã£o de Recarga");
        jbFinalizarSoliictacaoRecarga.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbFinalizarSoliictacaoRecarga.setEnabled(false);
        jbFinalizarSoliictacaoRecarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFinalizarSoliictacaoRecargaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfCodigoBarras)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jrbEscola)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jrbCmei)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jrbOutros))
                            .addComponent(jtfModeloCartucho)
                            .addComponent(jcbNomeEntidade, 0, 199, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooserDataDevolucao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooserDataRecarga, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(jDateChooserDataEntrega, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(jftfHoraEntrega))
                        .addGap(223, 223, 223))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jtfNumeroRecargas, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jcheckbCartuchoQueimado))
                            .addComponent(jbFinalizarSoliictacaoRecarga, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jrbEscola)
                            .addComponent(jrbCmei)
                            .addComponent(jrbOutros)
                            .addComponent(jLabel10)
                            .addComponent(jftfHoraEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jtfCodigoBarras, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addComponent(jDateChooserDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jtfModeloCartucho, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7))
                    .addComponent(jDateChooserDataRecarga, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jcbNomeEntidade, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jtfNumeroRecargas, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcheckbCartuchoQueimado))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jDateChooserDataDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbFinalizarSoliictacaoRecarga, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoActionPerformed
        cancelar();
}//GEN-LAST:event_jbNovoActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed

        if (opcao.equals("salvar")) {

            iniciaClasseGeral();
            salvar();
            
            opcao = "salvar";

        } else if (opcao.equals("alterar")) {

            if (enviarEmailTonerCarregado && jDateChooserDataRecarga.getDate() != null && jDateChooserDataDevolucao.getDate() == null) {
                
                iniciaEnviaEmail();
                iniciaValidaData();
                enviaEmail.enviarEmail(tipoEntid, jcbNomeEntidade.getSelectedItem().toString(), validaData.getDateAtual(), codigoUsuario, jtfModeloCartucho.getText(), jtfCodigoBarras.getText());
                
            }
            
            atualizar();
            
            opcao = "salvar";
            enviaEmail = null;

        }
        
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed

        if (jdbr == null) {
            jdbr = new JdBuscaRecarga(null, true);
        }

        jdbr.setCodigoUsuario(codigoUsuario);
        jdbr.setVisible(true);

        setRecargaBuscada(jdbr.getRecarga());
        jdbr.setRecarga();

        jrbOutros.transferFocus();

    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        cancelar();
}//GEN-LAST:event_jbCancelarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        excluir();
}//GEN-LAST:event_jbExcluirActionPerformed

    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarActionPerformed

        abilitaCampos();

        jbAlterar.setEnabled(false);

        opcao = "alterar";

        jbSalvar.setEnabled(true);

    }//GEN-LAST:event_jbAlterarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        fechar();
    }//GEN-LAST:event_formWindowClosing

    private void jrbEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbEscolaActionPerformed

        if (jrbEscola.isSelected()) {
            preencheComboEscolas();
            tipoEntid = "ESCOLA";
        }

    }//GEN-LAST:event_jrbEscolaActionPerformed

    private void jrbCmeiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCmeiActionPerformed

        if (jrbCmei.isSelected()) {
            preencheComboCmeis();
            tipoEntid = "CMEI";
        }

    }//GEN-LAST:event_jrbCmeiActionPerformed

    private void jrbOutrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbOutrosActionPerformed

        if (jrbOutros.isSelected()) {
            preencheComboOutros();
            tipoEntid = "OUTROS";
        }

    }//GEN-LAST:event_jrbOutrosActionPerformed

    private void jtfCodigoBarrasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfCodigoBarrasKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            buscaRapidaRecarga();

        }
    }//GEN-LAST:event_jtfCodigoBarrasKeyPressed

    private void jbImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImprimirActionPerformed
        JOptionPane.showMessageDialog(null, "AtenÃ§Ã£o, OpÃ§Ã£o de ImpressÃ£o ainda nÃ£o disponivel!", "AtenÃ§Ã£o", JOptionPane.WARNING_MESSAGE, null);
    }//GEN-LAST:event_jbImprimirActionPerformed

    private void jtfModeloCartuchoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfModeloCartuchoFocusLost
        jtfModeloCartucho.setText(jtfModeloCartucho.getText().toUpperCase());
    }//GEN-LAST:event_jtfModeloCartuchoFocusLost

    private void jtaObservacaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtaObservacaoFocusLost
        jtaObservacao.setText(jtaObservacao.getText().toUpperCase());
    }//GEN-LAST:event_jtaObservacaoFocusLost

    private void jbFinalizarSoliictacaoRecargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFinalizarSoliictacaoRecargaActionPerformed
        criaSolicitacaoRecarga();
    }//GEN-LAST:event_jbFinalizarSoliictacaoRecargaActionPerformed
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
    public void run() {
    new jfCadastroUsuario().setVisible(true);
    }
    });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgTipoEntidade;
    private com.toedter.calendar.JDateChooser jDateChooserDataDevolucao;
    private com.toedter.calendar.JDateChooser jDateChooserDataEntrega;
    private com.toedter.calendar.JDateChooser jDateChooserDataRecarga;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAlterar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbFinalizarSoliictacaoRecarga;
    private javax.swing.JButton jbImprimir;
    private javax.swing.JButton jbNovo;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JComboBox jcbNomeEntidade;
    private javax.swing.JCheckBox jcheckbCartuchoQueimado;
    private javax.swing.JFormattedTextField jftfHoraEntrega;
    private javax.swing.JPanel jpBotoes;
    private javax.swing.JRadioButton jrbCmei;
    private javax.swing.JRadioButton jrbEscola;
    private javax.swing.JRadioButton jrbOutros;
    private javax.swing.JTextArea jtaObservacao;
    private javax.swing.JTextField jtfCodigoBarras;
    private javax.swing.JTextField jtfModeloCartucho;
    private javax.swing.JTextField jtfNumeroRecargas;
    // End of variables declaration//GEN-END:variables

//Outros Metodos===================================================================================================================================
    public void fechar() {

        if (!jtfCodigoBarras.getText().isEmpty() || !jtfModeloCartucho.getText().isEmpty()
                || jcbNomeEntidade.getSelectedIndex() != 0 || jDateChooserDataRecarga.getDate() != null) {

            JOptionPane.showMessageDialog(null, "Cancele ou Salve o Cadastro em EdiÃ§Ã£o!", "AtenÃ§Ã£o", JOptionPane.WARNING_MESSAGE, null);

        } else {

            dao = null;
            this.dispose();

        }
    }

    public void cancelar() {

        iniciaValidaData();
        
        jrbEscola.setSelected(true);
        preencheComboEscolas();
        
        jtfCodigoBarras.setText("");
        jtfModeloCartucho.setText("");
        jtfNumeroRecargas.setText("0");
        jcbNomeEntidade.setSelectedIndex(0);
        jftfHoraEntrega.setText(validaData.getHoraAtual());
        jDateChooserDataRecarga.setDate(null);
        jDateChooserDataDevolucao.setDate(null);
        jDateChooserDataEntrega.setDate(validaData.getDateAtual());
        jtaObservacao.setText("");
        jcheckbCartuchoQueimado.setSelected(false);

        abilitaCampos();

        desabilitaBotoes();

        cartucho = null;
        cmei = null;
        controleCmei = null;
        controleEscola = null;
        controleOutro = null;
        escola = null;
        outro = null;
        solicitacaoRemanufatura = null;
        solicitacaoRemanufaturaItens = null;
        validaData = null;
        
        codigo = 0 ;
        opcao = "salvar";
        enviarEmailTonerCarregado = false;
        
        jrbOutros.transferFocus();

    }

    public void abilitaCampos() {

        jtfCodigoBarras.setEditable(true);
        jtfModeloCartucho.setEditable(false);
        jcbNomeEntidade.setEnabled(false);
        jDateChooserDataRecarga.setEnabled(true);
        jDateChooserDataEntrega.setEnabled(true);
        jDateChooserDataDevolucao.setEnabled(true);
        jtaObservacao.setEditable(true);

    }

    public void desabilitaCampos() {

        jtfCodigoBarras.setEditable(false);
        jtfModeloCartucho.setEditable(false);
        jcbNomeEntidade.setEnabled(false);
        jDateChooserDataEntrega.setEnabled(false);
        jDateChooserDataRecarga.setEnabled(false);
        jDateChooserDataDevolucao.setEnabled(false);

    }

    public void abilitaBotoes() {

        jbNovo.setEnabled(true);
        jbCancelar.setEnabled(true);
        jbBuscar.setEnabled(true);
        jbImprimir.setEnabled(true);

        if (permitirRecarga == true) {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(true);
            jbAlterar.setEnabled(true);
        } else {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        }

    }

    public void abilitaBotoesModoRapido() {

        jbNovo.setEnabled(true);
        jbCancelar.setEnabled(true);
        jbBuscar.setEnabled(true);
        jbImprimir.setEnabled(true);

        if (permitirRecarga == true) {
            jbSalvar.setEnabled(true);
            jbExcluir.setEnabled(true);
            jbAlterar.setEnabled(true);
        } else {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        }

    }

    public void desabilitaBotoes() {

        jbNovo.setEnabled(false);
        jbCancelar.setEnabled(true);
        jbBuscar.setEnabled(true);
        jbImprimir.setEnabled(false);

        if (permitirRecarga == true) {
            jbSalvar.setEnabled(true);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        } else {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        }

    }

    public void preencheComboEscolas() {

        iniciaDao();
        //DAO dao = new DAO();
        List listaEscolas = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaEscolas = dao.listarEscolas(0, "", "");

        for (int i = 0; i < listaEscolas.size(); i++) {
            iniciaEscola();
            escola = (Escola) listaEscolas.get(i);
            jcbNomeEntidade.addItem(escola.getNomeEscola());
        }

    }

    public void preencheComboCmeis() {

        iniciaDao();
        //DAO dao = new DAO();
        List listaCmeis = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaCmeis = dao.listarCmeis(0, "", "");

        for (int i = 0; i < listaCmeis.size(); i++) {
            iniciaCmei();
            cmei = (Cmei) listaCmeis.get(i);
            jcbNomeEntidade.addItem(cmei.getNomeCmei());
        }
    }

    public void preencheComboOutros() {

        iniciaDao();
        //DAO dao = new DAO();
        List listaOutros = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaOutros = dao.listarOutros(0, "", "");

        for (int i = 0; i < listaOutros.size(); i++) {
            iniciaOutro();
            outro = (Outro) listaOutros.get(i);
            jcbNomeEntidade.addItem(outro.getNomeOutro());
        }

    }

    public void buscaRapidaRecarga() {

        iniciaDao();
        iniciaCartucho();
        iniciaRecarga();
        iniciaValidaData();
        Recarga recar = new Recarga();

        cartucho = (Cartucho) dao.buscaCartucho(0, 0, 0, "", jtfCodigoBarras.getText(), "", false);
        
        recar = (Recarga) dao.buscaRecarga(0, 0, 0, 0, cartucho.getCodigoCartucho(), "", null, "");

        if (recar == null) {
            
            recar = new Recarga();
            
        }
        
        recar.setCartucho(cartucho);
        //recar.setCodigoBarra(cartucho.getCodigoBarra());
        //recar.setModeloCartucho(cartucho.getModeloCartucho().getNomeModeloCartucho());
        recar.setTipoEntidade(cartucho.getTipoEntidade());
        
        
        switch (recar.getTipoEntidade()) {
            
            case "ESCOLA":
                iniciaEscola();
                tipoEntid = "ESCOLA";
                jrbEscola.setSelected(true);
                jrbCmei.setSelected(false);
                jrbOutros.setSelected(false);
                preencheComboEscolas();
                
                escola = (Escola) recar.getCartucho().getEscola();
                jcbNomeEntidade.setSelectedItem(escola.getNomeEscola());
                break;
                
            case "CMEI":
                iniciaCmei();
                tipoEntid = "CMEI";
                jrbCmei.setSelected(true);
                jrbEscola.setSelected(false);
                jrbOutros.setSelected(false);
                preencheComboCmeis();
                
                cmei = (Cmei) recar.getCartucho().getCmei();
                jcbNomeEntidade.setSelectedItem(cmei.getNomeCmei());
                break;
                
            case "OUTROS":
                iniciaOutro();
                tipoEntid = "OUTROS";
                jrbOutros.setSelected(true);
                jrbCmei.setSelected(false);
                jrbEscola.setSelected(false);
                preencheComboOutros();
                
                outro = (Outro) recar.getCartucho().getOutro();
                jcbNomeEntidade.setSelectedItem(outro.getNomeOutro());
                break;
            
        }
        
        
        jtfModeloCartucho.setText(recar.getCartucho().getModeloCartucho().getNomeModeloCartucho());
        jcheckbCartuchoQueimado.setSelected(recar.getCartucho().isCartuchoQueimado());
        //jDateChooserDataDevolucao.setDate(recarga.getDataDevolucao());
        jtaObservacao.setText(recar.getObservacao());

        codigo = recar.getCodigoRecarga();
        recarga = recar;
        recarga.setCodigoRecarga(codigo);

        if (recar.getDataEntrega() != null && recar.getDataRecarga() == null && recar.getDataDevolucao() == null) {

            jftfHoraEntrega.setText(recar.getHoraEntrega());
            jDateChooserDataEntrega.setDate(recar.getDataEntrega());
            jDateChooserDataRecarga.setDate(validaData.getDateAtual());
            jtfNumeroRecargas.setText("" + recar.getNumeroRecargas());

            desabilitaCampos();

            opcao = "alterar";
            
            enviarEmailTonerCarregado = true;

            abilitaBotoesModoRapido();

        } else if (recar.getDataEntrega() != null && recar.getDataRecarga() != null && recar.getDataDevolucao() == null) {

            jftfHoraEntrega.setText(recar.getHoraEntrega());
            jDateChooserDataEntrega.setDate(recar.getDataEntrega());
            jDateChooserDataRecarga.setDate(recar.getDataRecarga());
            jDateChooserDataDevolucao.setDate(validaData.getDateAtual());
            jtfNumeroRecargas.setText("" + recar.getNumeroRecargas());

            jtfCodigoBarras.setEditable(false);
            jtfModeloCartucho.setEditable(false);
            jcbNomeEntidade.setEnabled(false);
            jDateChooserDataEntrega.setEnabled(false);
            jDateChooserDataRecarga.setEnabled(false);

            opcao = "alterar";

            abilitaBotoesModoRapido();

        } else {

            jDateChooserDataEntrega.setDate(validaData.getDateAtual());

            jtfNumeroRecargas.setText("" + (recar.getNumeroRecargas() + 1));

            jtfCodigoBarras.setEditable(false);
            jtfModeloCartucho.setEditable(false);
            jcbNomeEntidade.setEnabled(false);
            jDateChooserDataEntrega.setEnabled(false);

        }

        jbCancelar.transferFocusBackward();

    }
    
    public void atualizaHora() {
        iniciaValidaData();
        jftfHoraEntrega.setText(validaData.getHoraAtual());
    }
    
    public void run() {

        for (int i = 0; i == 0; i = 0) {
            try {
                //atualizaNumeroOficio();
                if (opcao.equals("salvar")) {
                    
                    iniciaDao();
                    //DAO dao = new DAO();

                    numeroSolicitacao = dao.getNumeroSolicitacaoRecarga(versao.getAno());
                    atualizaHora();
                    
                }

                threadAtualizaNumeroSolicitacaoRecarga.sleep(5000);
                threadAtualizaHora.sleep(5000);

                //this.finalize();
            } catch (Throwable ex) {
                //Logger.getLogger(AtualizaNumeroOficios.class.getName()).log(Level.SEVERE, null, ex);
                except.setMensagemErro("NÃ£o foi possivel atualizar o nÃºmero da SolicitaÃ§Ã£o!");
            }
        }

    }
    
//Geradores, Validadores===================================================================================================================================
    public void iniciaCartucho() {
    
        if (cartucho == null) {
            cartucho = new Cartucho();
        }
        
    }
    
    public void iniciaClasseGeral() {
        
        if (classeGeral == null) {
            classeGeral = new ClasseGeral();
        }
        
    }
    
    public void iniciaCmei() {
        
        if (cmei == null) {
            cmei = new Cmei();
        }
        
    }
    
    public void iniciaControleCmei() {
        
        if (controleCmei == null) {
            controleCmei = new ControleCmei();
        }
        
    }
    
    public void iniciaControleEscola() {
        
        if (controleEscola == null) {
            controleEscola = new ControleEscola();
        }
        
    }
    
    public void iniciaControleOutro() {
        
        if (controleOutro == null) {
            controleOutro = new ControleOutro();
        }
        
    }
    
    public void iniciaDao() {

        if (dao == null) {
            dao = new DAO();
        }

    }
    
    public void iniciaEnviaEmail() {
        
        if (enviaEmail == null) {
            enviaEmail = new EnviaEmail();
        }
        
    }
    
    public void iniciaEntregaRemanufaturados() {
        
        if (entregaRemanufaturados == null) {
            entregaRemanufaturados = new EntregaRemanufaturados();
        }
        
    }
    
    public void iniciaEntregaRemanufaturadosItens() {
        
        if (entregaRemanufaturadosItens == null) {
            entregaRemanufaturadosItens = new EntregaRemanufaturadosItens();
        }
        
    }
    
    public void iniciaEscola() {
        
        if (escola == null) {
            escola = new Escola();
        }
        
    }
    
    public void iniciaJFSolicitacaoRecarga() {
        
        if (jfSolicRecarg == null) {
            jfSolicRecarg = new JfSolicitacaoRecarga();
        }
        
    }
    
    public void iniciaLog() {
        
        if (geraLog == null) {
            geraLog = new Log();
        }
        
    }
    
    public void iniciaOutro() {
        
        if (outro == null) {
            outro = new Outro();
        }
        
    }
    
    public void iniciaRecarga() {
        
        if (recarga == null) {
            recarga = new Recarga();
        }
        
    }
    
    public void iniciaSolicitacaoRecarga() {
        
        if  (solicitacaoRecarga == null) {
            solicitacaoRecarga = new SolicitacaoRecarga();
        }
        
    }
    
    public void iniciaSolicitacaoRemanufatura() {
        
        if  (solicitacaoRemanufatura == null) {
            solicitacaoRemanufatura = new SolicitacaoRemanufatura();
        }
        
    }
    
    public void iniciaSolicitacaoRemanufaturaItens() {
        
        if  (solicitacaoRemanufaturaItens == null) {
            solicitacaoRemanufaturaItens = new SolicitacaoRemanufaturaItens();
        }
        
    }
    
    public void iniciaUsuario() {
        
        if (usuario == null) {
            usuario = new Usuario();
        }
        
    }
    
    public void iniciaValidaData() {
        
        if (validaData == null) {
            validaData = new ValidaData();
        }
        
    }
    
    public void iniciaVerificadorDataPeriodo() {
        
        if (verificadorDataPeriodo == null) {
            verificadorDataPeriodo = new VerificadorDataPeriodo();
        }
        
    }
    
    public void criaEntregaRemanufaturados() {
        
        iniciaDao();
        iniciaEntregaRemanufaturados();
        iniciaEntregaRemanufaturadosItens();
        
        entregaRemanufaturados = (EntregaRemanufaturados) dao.buscaEntregaRemanufaturados(0, 0, false, versao.getAno());
        
        if (entregaRemanufaturados == null) {
            
            EntregaRemanufaturados entregaRemanufaturadosAux;
            iniciaEntregaRemanufaturados();
            iniciaUsuario();
                
            usuario = (Usuario) dao.busca(usuario, getCodigoUsuario());
            
            entregaRemanufaturadosAux = (EntregaRemanufaturados) dao.buscaEntregaRemanufaturados(0, 1, true, versao.getAno());
            
            entregaRemanufaturados.setAno(versao.getAno());
            entregaRemanufaturados.setNumeroEntregaRemanufaturados(dao.getNumeroEntregaRemanufaturados(versao.getAno()));
            entregaRemanufaturados.setProtocoloFinalizado(false);
            entregaRemanufaturados.setUsuario(usuario);
                
            dao.inserir(entregaRemanufaturados, 0, codigoUsuario);
            usuario = null;
            
        }
        
        if (dao.verificarEntregaRemanufaturadosItens(entregaRemanufaturados.getCodigoEntregaRemanufaturados(), cartucho.getCodigoCartucho()) == null) {
            
            entregaRemanufaturadosItens.setCartucho(cartucho);
            entregaRemanufaturadosItens.setEntregaRemanufaturados(entregaRemanufaturados);
            
            dao.inserir(entregaRemanufaturadosItens, 0, codigoUsuario);
            
        } else {
            System.out.println("Toner jÃ¡ adicionado ao Protocolo de Entrega de Remanufaturados!");
        }
        
    }
    
    public void criaSolicitacaoRecarga() {

        iniciaClasseGeral();
        iniciaSolicitacaoRecarga();
                
        listaCodigoBarras.add(jtfCodigoBarras.getText());
        listaModelos.add(jtfModeloCartucho.getText());
        
        if (jcbNomeEntidade.getSelectedItem().toString().isEmpty()) {
            //nÃ£o faz nada e o nomeEntidade permanece o mesmo
        } else {
            nomeEntidade = jcbNomeEntidade.getSelectedItem().toString();
        }
        
        if (classeGeral.msgConfirmaOpcao("Deseja FINALIZAR a SolicitaÃ§Ã£o de Recarga!?")) {
                
            enviaSolicitacao();
            
            listaCodigoBarras.removeAll(listaCodigoBarras);
            listaModelos.removeAll(listaModelos);
            
            solicitacaoRecarga = null;
            nomeEntidade = "";
            
            jbFinalizarSoliictacaoRecarga.setEnabled(false);
            
        } else {
            
            jbFinalizarSoliictacaoRecarga.setEnabled(true);
            
        }
        
    }
    
    public void criaSolicitacaoRemanufatura() {
        
        iniciaDao();
        iniciaSolicitacaoRemanufatura();
        iniciaSolicitacaoRemanufaturaItens();
            
        solicitacaoRemanufatura = (SolicitacaoRemanufatura) dao.buscaSolicitacaoRemanufatura(0, 0, false, versao.getAno());
            
        if (solicitacaoRemanufatura == null) {
                
            SolicitacaoRemanufatura solicitacaoRemanufaturaAux;
            iniciaSolicitacaoRemanufatura();
            iniciaUsuario();
               
            usuario = (Usuario) dao.busca(usuario, getCodigoUsuario());
                
            solicitacaoRemanufaturaAux = (SolicitacaoRemanufatura) dao.buscaSolicitacaoRemanufatura(0, 1, true, versao.getAno());
                
            solicitacaoRemanufatura.setAno(versao.getAno());
            solicitacaoRemanufatura.setEmissorSecretaria(solicitacaoRemanufaturaAux.getEmissorSecretaria());
            solicitacaoRemanufatura.setNumeroSolicitacao(dao.getNumeroSolicitacaoRemanufatura(versao.getAno()));
            solicitacaoRemanufatura.setReceptorEmpresa(solicitacaoRemanufaturaAux.getReceptorEmpresa());
            solicitacaoRemanufatura.setSolicitacaoEnviada(false);
            solicitacaoRemanufatura.setUsuario(usuario);
                
            dao.inserir(solicitacaoRemanufatura, 0, codigoUsuario);
            usuario = null;
                
        } 
            
        if (dao.verificarSolicitacaoRemanufaturaItens(solicitacaoRemanufatura.getCodigoSolicitacaoRemanufatura(), cartucho.getCodigoCartucho()) == null) {
            
            solicitacaoRemanufaturaItens.setCartucho(cartucho);
            solicitacaoRemanufaturaItens.setSolicitacaoRemanufatura(solicitacaoRemanufatura);
            dao.inserir(solicitacaoRemanufaturaItens, 0, codigoUsuario);
            
        } else {
            System.out.println("Toner jÃ¡ adicionado Ã  SolicitaÃ§Ã£o de Remanufatura!");
        }
        
    }
    
    public void enviaSolicitacao() {
        
        for (int i = 0; i < listaCodigoBarras.size(); i++) {
            
            switch (i) {
                
                case 0: solicitacaoRecarga.setCodigoBarra01(listaCodigoBarras.get(0).toString());
                    solicitacaoRecarga.setModeloToner01(listaModelos.get(0).toString());
                    break;
                
                case 1: solicitacaoRecarga.setCodigoBarra02(listaCodigoBarras.get(1).toString());
                    solicitacaoRecarga.setModeloToner02(listaModelos.get(1).toString());
                    break;
                    
                case 2: solicitacaoRecarga.setCodigoBarra03(listaCodigoBarras.get(2).toString());
                    solicitacaoRecarga.setModeloToner03(listaModelos.get(2).toString());
                    break;
                    
                case 3: solicitacaoRecarga.setCodigoBarra04(listaCodigoBarras.get(3).toString());
                    solicitacaoRecarga.setModeloToner04(listaModelos.get(3).toString());
                    break;
                    
                case 4: solicitacaoRecarga.setCodigoBarra05(listaCodigoBarras.get(4).toString());
                    solicitacaoRecarga.setModeloToner05(listaModelos.get(4).toString());
                    break;
                    
                case 5: solicitacaoRecarga.setCodigoBarra06(listaCodigoBarras.get(5).toString());
                    solicitacaoRecarga.setModeloToner06(listaModelos.get(5).toString());
                    break;
                    
                case 6: solicitacaoRecarga.setCodigoBarra07(listaCodigoBarras.get(6).toString());
                    solicitacaoRecarga.setModeloToner07(listaModelos.get(6).toString());
                    break;
                    
                case 7: solicitacaoRecarga.setCodigoBarra08(listaCodigoBarras.get(7).toString());
                   solicitacaoRecarga.setModeloToner08(listaModelos.get(7).toString());
                    break;
                    
                case 8: solicitacaoRecarga.setCodigoBarra09(listaCodigoBarras.get(8).toString());
                    solicitacaoRecarga.setModeloToner09(listaModelos.get(8).toString());
                    break;
                    
                case 9: solicitacaoRecarga.setCodigoBarra10(listaCodigoBarras.get(9).toString());
                    solicitacaoRecarga.setModeloToner10(listaModelos.get(9).toString());
                    break;

            }
            
        }
        
        iniciaDao();
        iniciaUsuario();
        
        solicitacaoRecarga.setAno(versao.getAno());
        solicitacaoRecarga.setDataSolicitacao(jDateChooserDataEntrega.getDate());
        solicitacaoRecarga.setEmissor(tipoEntid + " " + nomeEntidade);
        solicitacaoRecarga.setHoraSolicitacao(jftfHoraEntrega.getText());
        solicitacaoRecarga.setUsuario((Usuario) dao.busca(usuario, codigoUsuario));
        dao.encerraSessao();
        solicitacaoRecarga.setNumeroSolicitacao(numeroSolicitacao);
        solicitacaoRecarga.setReceptor("SETOR DE INFORMÃTICA EDUCACIONAL");
        solicitacaoRecarga.setSolicitacaoFinalizada(true);
        
        try {
            iniciaLog();
            geraLog.criaLog(codigoUsuario, "SolicitaÃ§Ã£o Recarga", "Tentou Salvar NÂº " + solicitacaoRecarga.getNumeroSolicitacao() + " Emitido por " + solicitacaoRecarga.getEmissor() + " e Recebido por " + solicitacaoRecarga.getReceptor());
        } catch (IOException ex) {
            Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        dao.inserir(solicitacaoRecarga, 0, codigoUsuario);
        solicitacaoRecarga = (SolicitacaoRecarga) dao.buscaSolicitacaoRecarga(solicitacaoRecarga.getNumeroSolicitacao(), versao.getAno());

        iniciaJFSolicitacaoRecarga();
        
        usuario = (Usuario) solicitacaoRecarga.getUsuario();
        
        jfSolicRecarg.setCodigoUsuario(usuario.getCodigoUsuario());
        jfSolicRecarg.setNullSolicitacaoRecarga();
        jfSolicRecarg.setSolicitacaoRecarga(solicitacaoRecarga);
        jfSolicRecarg.setVisible(true);
        
        solicitacaoRecarga = null;
        usuario = null;
        
    }
    
//Getters and Setters===================================================================================================================================
    public void setRecargaBuscada(Recarga recargaBuscada) {

        if (recargaBuscada == null) {
        } else {

            iniciaDao();
            iniciaCartucho();
            iniciaRecarga();
            
            cartucho = recargaBuscada.getCartucho();
            
            switch (recargaBuscada.getTipoEntidade()) {
                
                case "ESCOLA":
                    //iniciaEscola();
                    tipoEntid = "ESCOLA";
                    jrbEscola.setSelected(true);
                    jrbCmei.setSelected(false);
                    jrbOutros.setSelected(false);
                    preencheComboEscolas();
                    
                    //escola = recargaBuscada.getEscola();
                    jcbNomeEntidade.setSelectedItem(recargaBuscada.getCartucho().getEscola().getNomeEscola());
                    break;
                
                case "CMEI":
                    //iniciaCmei();
                    tipoEntid = "CMEI";
                    jrbCmei.setSelected(true);
                    jrbEscola.setSelected(false);
                    jrbOutros.setSelected(false);
                    preencheComboCmeis();
                    
                    //cmei = recargaBuscada.getCmei();
                    jcbNomeEntidade.setSelectedItem(recargaBuscada.getCartucho().getCmei().getNomeCmei());
                    break;
                
                case "OUTROS":
                    //iniciaOutro();
                    tipoEntid = "OUTROS";
                    jrbOutros.setSelected(true);
                    jrbCmei.setSelected(false);
                    jrbEscola.setSelected(false);
                    preencheComboOutros();
                    
                    //outro = recargaBuscada.getOutro();
                    jcbNomeEntidade.setSelectedItem(recargaBuscada.getCartucho().getOutro().getNomeOutro());
                    break;
                
            }
            
            jtfCodigoBarras.setText(recargaBuscada.getCartucho().getCodigoBarra());
            jtfModeloCartucho.setText(recargaBuscada.getCartucho().getModeloCartucho().getNomeModeloCartucho());
            jtfNumeroRecargas.setText("" + recargaBuscada.getNumeroRecargas());
            jDateChooserDataEntrega.setDate(recargaBuscada.getDataEntrega());
            jDateChooserDataRecarga.setDate(recargaBuscada.getDataRecarga());
            jDateChooserDataDevolucao.setDate(recargaBuscada.getDataDevolucao());
            jtaObservacao.setText(recargaBuscada.getObservacao());
            jcheckbCartuchoQueimado.setSelected(recargaBuscada.getCartucho().isCartuchoQueimado());
            jftfHoraEntrega.setText(recargaBuscada.getHoraEntrega());

            codigo = recargaBuscada.getCodigoRecarga();
            recarga = recargaBuscada;
            recarga.setCodigoRecarga(codigo);

            jtfCodigoBarras.setEditable(false);
            jtfModeloCartucho.setEditable(false);
            jcbNomeEntidade.setEnabled(false);
            jDateChooserDataRecarga.setEnabled(false);
            jDateChooserDataEntrega.setEnabled(false);

            if (recargaBuscada.getDataEntrega() != null && recargaBuscada.getDataRecarga() != null && recargaBuscada.getDataDevolucao() == null) {

                enviarEmailTonerCarregado = true;

            }
            
            abilitaBotoes();

        }

    }

    public void setNumeroCaracteres() {

        jtfCodigoBarras.setDocument(new FixedLengthDocument(80));
        jtfModeloCartucho.setDocument(new FixedLengthDocument(60));

    }

    public int getCodigoUsuario() {
        return codigoUsuario;
    }

    public void setCodigoUsuario(int codigoUsuario) {
        this.codigoUsuario = codigoUsuario;
        getPermissoes();
        desabilitaBotoes();
    }

    public void getPermissoes() {
        Permissoes permissoes;
        iniciaDao();
        //DAO dao = new DAO();

        permissoes = (Permissoes) dao.buscaPermissoes(codigoUsuario);

        permitirRecarga = permissoes.isPermitirRecarga();
    }

//Metodos DAO===================================================================================================================================
    public void salvar() {

        if (!jtfCodigoBarras.getText().isEmpty() && !jtfModeloCartucho.getText().isEmpty() && jcbNomeEntidade.getSelectedIndex() != 0) {

            iniciaDao();

            //recarga.setCodigoBarra(jtfCodigoBarras.getText());
            recarga.setDataDevolucao(jDateChooserDataDevolucao.getDate());
            recarga.setDataRecarga(jDateChooserDataRecarga.getDate());
            recarga.setDataEntrega(jDateChooserDataEntrega.getDate());
            recarga.setHoraEntrega(jftfHoraEntrega.getText());
            //recarga.setModeloCartucho(jtfModeloCartucho.getText());
            recarga.setObservacao(jtaObservacao.getText());
            recarga.setNumeroRecargas(Integer.valueOf(jtfNumeroRecargas.getText()));
            
            cartucho.setCartuchoQueimado(jcheckbCartuchoQueimado.isSelected());
            
            recarga.setCartucho(cartucho);
            
            /*if (jrbEscola.isSelected() == true) {
                
                iniciaControleEscola();
                iniciaEscola();
                recarga.setTipoEntidade("ESCOLA");
                
                escola = (Escola) dao.busca(escola, controleEscola.getCodigoEscola(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                recarga.setEscola(escola);
                
            } else if (jrbCmei.isSelected() == true) {
                
                iniciaCmei();
                iniciaControleCmei();
                recarga.setTipoEntidade("CMEI");
                
                cmei = (Cmei) dao.busca(cmei, controleCmei.getCodigoCmei(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                recarga.setCmei(cmei);
                
            } else if (jrbOutros.isSelected() == true) {
                
                iniciaControleOutro();
                iniciaOutro();
                recarga.setTipoEntidade("OUTROS");
                
                outro = (Outro) dao.busca(outro, controleOutro.getCodigoOutro(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                recarga.setOutro(outro);
                
            }*/

            try {
                iniciaLog();
                geraLog.criaLog(codigoUsuario, "Recarga", "Tentou Salvar para " + recarga.getTipoEntidade() + " " + jcbNomeEntidade.getSelectedItem().toString());
            } catch (IOException ex) {
                Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            dao.inserir(recarga, 7, codigoUsuario);
            
            if (jDateChooserDataEntrega.getDate() != null && jDateChooserDataRecarga.getDate() == null && jDateChooserDataDevolucao.getDate() == null) {
                criaSolicitacaoRecarga();
                criaSolicitacaoRemanufatura();
            }
            
            if (jDateChooserDataEntrega.getDate() != null && jDateChooserDataRecarga.getDate() != null && jDateChooserDataDevolucao.getDate() == null) {
                criaEntregaRemanufaturados();
            }
            
            cancelar();

        } else {
            JOptionPane.showMessageDialog(null, "Complete os Campos ObrigatÃ³rios, destacados em Azul!", "AtenÃ§Ã£o", JOptionPane.WARNING_MESSAGE, null);
        }

    }

    public void atualizar() {

        if (!jtfCodigoBarras.getText().isEmpty() && !jtfModeloCartucho.getText().isEmpty() && jcbNomeEntidade.getSelectedIndex() != 0) {

            iniciaDao();

            //recarga.setCodigoBarra(jtfCodigoBarras.getText());
            recarga.setDataDevolucao(jDateChooserDataDevolucao.getDate());
            recarga.setDataRecarga(jDateChooserDataRecarga.getDate());
            recarga.setDataEntrega(jDateChooserDataEntrega.getDate());
            recarga.setHoraEntrega(jftfHoraEntrega.getText());
            //recarga.setModeloCartucho(jtfModeloCartucho.getText());
            recarga.setObservacao(jtaObservacao.getText());
            recarga.setNumeroRecargas(Integer.valueOf(jtfNumeroRecargas.getText()));

            cartucho.setCartuchoQueimado(jcheckbCartuchoQueimado.isSelected());
            
            recarga.setCartucho(cartucho);
            
            /*if (jrbEscola.isSelected() == true) {
                
                iniciaControleEscola();
                iniciaEscola();
                recarga.setTipoEntidade("ESCOLA");
                
                escola = (Escola) dao.busca(escola, controleEscola.getCodigoEscola(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                recarga.setEscola(escola);
                
            } else if (jrbCmei.isSelected() == true) {
                
                iniciaCmei();
                iniciaControleCmei();
                recarga.setTipoEntidade("CMEI");
                
                cmei = (Cmei) dao.busca(cmei, controleCmei.getCodigoCmei(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                recarga.setCmei(cmei);
                
            } else if (jrbOutros.isSelected() == true) {
                
                iniciaControleOutro();
                iniciaOutro();
                recarga.setTipoEntidade("OUTROS");
                
                outro = (Outro) dao.busca(outro, controleOutro.getCodigoOutro(jcbNomeEntidade.getSelectedItem().toString()));
                dao.encerraSessao();
                recarga.setOutro(outro);
                
            }*/

            try {
                iniciaLog();
                geraLog.criaLog(codigoUsuario, "Recarga", "Tentou alterar para " + recarga.getTipoEntidade() + " " + jcbNomeEntidade.getSelectedItem().toString());
            } catch (IOException ex) {
                Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            dao.atualizar(recarga, 7, codigoUsuario);
            
            if (jDateChooserDataEntrega.getDate() != null && jDateChooserDataRecarga.getDate() == null && jDateChooserDataDevolucao.getDate() == null) {
                criaSolicitacaoRemanufatura();
            }
            
            if (jDateChooserDataEntrega.getDate() != null && jDateChooserDataRecarga.getDate() != null && jDateChooserDataDevolucao.getDate() == null) {
                criaEntregaRemanufaturados();
            }
            
            cancelar();

        } else {
            JOptionPane.showMessageDialog(null, "Complete os Campos ObrigatÃ³rios, destacados em Azul!", "AtenÃ§Ã£o", JOptionPane.WARNING_MESSAGE, null);
        }

    }

    public void excluir() {

        iniciaClasseGeral();
        
        if (classeGeral.msgConfirma("Deseja excluir a recarga?")) {

            iniciaDao();
            dao.excluir(recarga, codigoUsuario);
            cancelar();

        }
    }
}
