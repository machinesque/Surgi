/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package visual;

import conexao.Conexao;
import controlador.*;
import dao.DAO;
import excecoes.ExcCadastro;
import excecoes.MensagensExcessao;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.text.ParseException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import modelo.Cartucho;
import modelo.Cmei;
import modelo.Escola;
import modelo.Outro;
import modelo.Permissoes;
import modelo.SolicitacaoRemanufatura;
import modelo.SolicitacaoRemanufaturaItens;
import modelo.Usuario;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author luizam
 */
public class JfSolicitacaoRemanufatura extends javax.swing.JFrame implements Runnable {

    private static ControleVersao versao = new ControleVersao();
    private Cartucho cartucho;
    private ClasseGeral classeGeral;
    private Cmei cmei;
    private DAO dao;
    private EditaOrdemTabela editaOrdemTabela;
    private Escola escola;
    private Formatos formato = new Formatos();
    private Log geraLog;
    private Outro outro;
    private SolicitacaoRemanufatura solicitacaoRemanufatura;
    private SolicitacaoRemanufaturaItens solicitacaoRemanufaturaItens;
    private Usuario usuario;
    private ValidaData validaData;
    
    private MensagensExcessao except;
    private Thread threadAtualizaNumeroSolicitacaoRecarga = new Thread(this);
    private Thread threadAtualizaHora = new Thread(this);
    
    private JasperPrint jPrint;
    private JasperViewer jViewer;
    private JdBuscaSolicitacaoRemanufatura jdbsr;
    private JdAtualizarItemSolicitacaoRecarga jdaisr;
    
    private int codigo = 0;
    private int codigoUsuario;
    private String opcao = "salvar";
    private String tipoNomeEntidade;
    private String solicitacaoRecargaVerificada;
    private boolean solicitarRecarga;
    
    /**
     * Creates new form jfSolicitacaoRecarga
     */
    public JfSolicitacaoRemanufatura() {
        super("Solicitação de Remanufatura - " + versao.getVersao() + " - " + versao.getAno());
        initComponents();
        
        iniciaValidaData();

        //Altera icone na barra de titulo
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.getImage("C:/SURGI/imagens/SURGI32x32.png");
        this.setIconImage(img);

        //maximiza tela
        //this.setExtendedState(MAXIMIZED_BOTH);

        //centraliza tela
        setSize(getWidth(), getHeight());
        setLocationRelativeTo(null);
        
        jlAnoSolicitacao.setText(versao.getAno());
        
        jDateChooserDataEnvio.setDate(validaData.getDateAtual());
        threadAtualizaNumeroSolicitacaoRecarga.start();
        threadAtualizaHora.start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpmSolicitacaoRecarga = new javax.swing.JPopupMenu();
        jmiExcluirSelecao = new javax.swing.JMenuItem();
        jmiAlterarSelecao = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jlAnoSolicitacao = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtfSolicitacaoNumero = new javax.swing.JTextField();
        jDateChooserDataEnvio = new com.toedter.calendar.JDateChooser();
        jtfSolicitacaoEmissor = new javax.swing.JTextField();
        jtfSolicitacaoReceptor = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbSolicitacaoCartuchos = new javax.swing.JTable();
        jpBotoes = new javax.swing.JPanel();
        jbFinalizarSolicitacao = new javax.swing.JButton();
        jbBuscar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbAlterar = new javax.swing.JButton();
        jbImprimir = new javax.swing.JButton();

        jmiExcluirSelecao.setText("Excluir Item");
        jmiExcluirSelecao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExcluirSelecaoActionPerformed(evt);
            }
        });
        jpmSolicitacaoRecarga.add(jmiExcluirSelecao);

        jmiAlterarSelecao.setText("Alterar Item");
        jmiAlterarSelecao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAlterarSelecaoActionPerformed(evt);
            }
        });
        jpmSolicitacaoRecarga.add(jmiAlterarSelecao);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());

        jlAnoSolicitacao.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlAnoSolicitacao.setText("Ano Solicitação Remanufatura");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Número da Solicitação: ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Data de Envio: ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Emissor: ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Receptor: ");

        jtfSolicitacaoNumero.setEditable(false);
        jtfSolicitacaoNumero.setBackground(new java.awt.Color(204, 204, 255));
        jtfSolicitacaoNumero.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfSolicitacaoNumero.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtfSolicitacaoNumero.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfSolicitacaoNumeroFocusLost(evt);
            }
        });

        jDateChooserDataEnvio.setBackground(new java.awt.Color(204, 204, 255));
        jDateChooserDataEnvio.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDateChooserDataEnvio.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jtfSolicitacaoEmissor.setEditable(false);
        jtfSolicitacaoEmissor.setBackground(new java.awt.Color(204, 204, 255));
        jtfSolicitacaoEmissor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfSolicitacaoEmissor.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtfSolicitacaoEmissor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfSolicitacaoEmissorFocusLost(evt);
            }
        });

        jtfSolicitacaoReceptor.setEditable(false);
        jtfSolicitacaoReceptor.setBackground(new java.awt.Color(204, 204, 255));
        jtfSolicitacaoReceptor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfSolicitacaoReceptor.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtfSolicitacaoReceptor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfSolicitacaoReceptorFocusLost(evt);
            }
        });

        jtbSolicitacaoCartuchos.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtbSolicitacaoCartuchos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ordem", "Tipo de Unidade", "Unidade", "Modelo", "Código de Barras"
            }
        ));
        jtbSolicitacaoCartuchos.setToolTipText("Existem opções clicando com o botão direito na tabela");
        jtbSolicitacaoCartuchos.setComponentPopupMenu(jpmSolicitacaoRecarga);
        jtbSolicitacaoCartuchos.setRowHeight(19);
        jtbSolicitacaoCartuchos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jtbSolicitacaoCartuchos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jlAnoSolicitacao))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jtfSolicitacaoNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jDateChooserDataEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jtfSolicitacaoEmissor, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                                    .addComponent(jtfSolicitacaoReceptor))))
                        .addGap(0, 143, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlAnoSolicitacao)
                .addGap(28, 28, 28)
                .addComponent(jDateChooserDataEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtfSolicitacaoEmissor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtfSolicitacaoReceptor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jtfSolicitacaoNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(433, 433, 433))
        );

        jpBotoes.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());

        jbFinalizarSolicitacao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbFinalizarSolicitacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/OK.png"))); // NOI18N
        jbFinalizarSolicitacao.setText("Finalizar Solicitação");
        jbFinalizarSolicitacao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbFinalizarSolicitacao.setEnabled(false);
        jbFinalizarSolicitacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFinalizarSolicitacaoActionPerformed(evt);
            }
        });

        jbBuscar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/pesquisar.png"))); // NOI18N
        jbBuscar.setText("Buscar");
        jbBuscar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbCancelar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cancelar.png"))); // NOI18N
        jbCancelar.setText("Cancelar");
        jbCancelar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jbExcluir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/delete.png"))); // NOI18N
        jbExcluir.setText("Excluir");
        jbExcluir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbExcluir.setEnabled(false);
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbAlterar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/reload.png"))); // NOI18N
        jbAlterar.setText("Alterar");
        jbAlterar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbAlterar.setEnabled(false);
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarActionPerformed(evt);
            }
        });

        jbImprimir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imprimir.png"))); // NOI18N
        jbImprimir.setText("Imprimir");
        jbImprimir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbImprimir.setEnabled(false);
        jbImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpBotoesLayout = new javax.swing.GroupLayout(jpBotoes);
        jpBotoes.setLayout(jpBotoesLayout);
        jpBotoesLayout.setHorizontalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBotoesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbFinalizarSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpBotoesLayout.setVerticalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbFinalizarSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbFinalizarSolicitacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFinalizarSolicitacaoActionPerformed

        if (jtfSolicitacaoEmissor.getText().isEmpty() || jtfSolicitacaoNumero.getText().isEmpty() || jtfSolicitacaoReceptor.getText().isEmpty()) {

            JOptionPane.showMessageDialog(null, "Preencha os campos obrigatórios destacados em azul!", "Atenção", JOptionPane.WARNING_MESSAGE, null);

        } else {

            if (opcao.equals("salvar")) {

                verificaNumeroSolicitacaoRecarga();
                
                if (!solicitacaoRecargaVerificada.isEmpty()) {

                    iniciaClasseGeral();

                    if (classeGeral.msgConfirmaOpcao("Já existe uma Solicitação de Remanufatura Cadastrastrada!\n Deseja Salvar/Criar uma nova Solicitação? \n Clique em 'NÃO' para buscar e complementar o Agendamento já existente! \n Clique em 'SIM' para Salvar/Criar o novo agendamento!")) {
                        salvar();
                        opcao = "salvar";
                    }

                } else {
                    salvar();
                    opcao = "salvar";
                }

            } else if (opcao.equals("alterar")) {

                atualizar();
                opcao = "salvar";

            }

            jbFinalizarSolicitacao.setEnabled(false);
            jbImprimir.setEnabled(true);
            
        }
    }//GEN-LAST:event_jbFinalizarSolicitacaoActionPerformed

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed

        if (jdbsr == null) {
            jdbsr = new JdBuscaSolicitacaoRemanufatura(null, true);
        }

        jdbsr.setCodigoUsuario(codigoUsuario);
        jdbsr.setVisible(true);

        setSolicitacaoRemanufaturaBuscada(jdbsr.getSolicitacaoRemanufatura());
        jdbsr.setSolicitacaoRemanufatura();
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        cancelar();
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        excluir();
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarActionPerformed

        abilitaCampos();

        jbAlterar.setEnabled(false);

        opcao = "alterar";

        jbFinalizarSolicitacao.setEnabled(true);
    }//GEN-LAST:event_jbAlterarActionPerformed

    private void jbImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImprimirActionPerformed

        //ADOGeral ag = new ADOGeral();
        Conexao conexao = new Conexao();
        HashMap parametros = new HashMap();
        try {
            //System.out.println(codigoRegistro);
            //parametros.put("titulo", "Titulo Relatorio");
            System.out.println("Codigo aqui " + codigo);
            parametros.put("codigoSolicitacaoRemanufatura", new Integer(codigo));
            //parametros.put("codigo", lista.get(0).getNome();
            //ADOGeral.conectar();
            conexao.getConexao();
        } catch (ExcCadastro ex) {
            Logger.getLogger(JfImpressosAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }

        //        JRDataSource jrds = new JRBeanCollectionDataSource(lista);

        try {

            try {
                iniciaLog();
                geraLog.criaLog(codigoUsuario, "Solicitação Remanufatura", "Imprimiu Nº " + solicitacaoRemanufatura.getNumeroSolicitacao() + " Emitido por " + solicitacaoRemanufatura.getEmissorSecretaria()+ " e Recebido por " + solicitacaoRemanufatura.getReceptorEmpresa());
            } catch (IOException ex) {
                Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            iniciaClasseGeral();
            classeGeral.msgInforma("Esta opção mostra 3 relações distintas para impressão!");
            
            //jReport = JasperCompileManager.compileReport("E:/LUIZ/PROJETOS JAVA/CORPORATIVO/m2GestaoClinicas/FichaPaciente.jrxml");
            //jPrint = JasperFillManager.fillReport("C:/m2GestaoClinicas/FichaPaciente.jasper", parametros, ADOGeral.getConexao());
            jPrint = JasperFillManager.fillReport("SolicitacaoRemanufaturaCmei.jasper", parametros, conexao.getConexao());
            jViewer.viewReport(jPrint, false);
            
            jPrint = JasperFillManager.fillReport("SolicitacaoRemanufaturaEscola.jasper", parametros, conexao.getConexao());
            jViewer.viewReport(jPrint, false);
            
            jPrint = JasperFillManager.fillReport("SolicitacaoRemanufaturaOutros.jasper", parametros, conexao.getConexao());
            jViewer.viewReport(jPrint, false);
            //jPrint = JasperFillManager.fillReport(jReport, parametros, jrds);

            //if (!(jViewer == null)) {
            //jViewer = new JasperViewer(jPrint, false);
            //jViewer.setExtendedState(JFrame.MAXIMIZED_BOTH);
            //}

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jbImprimirActionPerformed

    private void jtfSolicitacaoNumeroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfSolicitacaoNumeroFocusLost
       
        iniciaClasseGeral();

        jtfSolicitacaoNumero.setText(jtfSolicitacaoNumero.getText().toUpperCase());
        
        classeGeral.somenteNumero(jtfSolicitacaoNumero.getText());
        
    }//GEN-LAST:event_jtfSolicitacaoNumeroFocusLost

    private void jtfSolicitacaoEmissorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfSolicitacaoEmissorFocusLost
        jtfSolicitacaoEmissor.setText(jtfSolicitacaoEmissor.getText().toUpperCase());
    }//GEN-LAST:event_jtfSolicitacaoEmissorFocusLost

    private void jtfSolicitacaoReceptorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfSolicitacaoReceptorFocusLost
        jtfSolicitacaoReceptor.setText(jtfSolicitacaoReceptor.getText().toUpperCase());
    }//GEN-LAST:event_jtfSolicitacaoReceptorFocusLost

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        fechar();
    }//GEN-LAST:event_formWindowClosing

    private void jmiExcluirSelecaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExcluirSelecaoActionPerformed
        excluirItemSelecionado();
    }//GEN-LAST:event_jmiExcluirSelecaoActionPerformed

    private void jmiAlterarSelecaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAlterarSelecaoActionPerformed
        atualizarItemSelecionado();
    }//GEN-LAST:event_jmiAlterarSelecaoActionPerformed

    /**
     * @param args the command line arguments
     */
    //public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        /*try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jfSolicitacaoRecarga.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jfSolicitacaoRecarga.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jfSolicitacaoRecarga.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jfSolicitacaoRecarga.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }*/
        //</editor-fold>

        /*
         * Create and display the form
         */
        /*java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new jfSolicitacaoRecarga().setVisible(true); 
            }
        });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser jDateChooserDataEnvio;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAlterar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbFinalizarSolicitacao;
    private javax.swing.JButton jbImprimir;
    private javax.swing.JLabel jlAnoSolicitacao;
    private javax.swing.JMenuItem jmiAlterarSelecao;
    private javax.swing.JMenuItem jmiExcluirSelecao;
    private javax.swing.JPanel jpBotoes;
    private javax.swing.JPopupMenu jpmSolicitacaoRecarga;
    private javax.swing.JTable jtbSolicitacaoCartuchos;
    private javax.swing.JTextField jtfSolicitacaoEmissor;
    private javax.swing.JTextField jtfSolicitacaoNumero;
    private javax.swing.JTextField jtfSolicitacaoReceptor;
    // End of variables declaration//GEN-END:variables
//Outros Metodos ===========================================================================================================================================
    public void fechar() {

        if (!jtfSolicitacaoEmissor.getText().isEmpty() || !jtfSolicitacaoReceptor.getText().isEmpty()) {

            JOptionPane.showMessageDialog(null, "Cancele ou Salve a Solicitação em Edição!", "Atenção", JOptionPane.WARNING_MESSAGE, null);

        } else {

            dao = null;
            cancelar();
            this.dispose();
        }
    }

    public void cancelar() {

        DefaultTableModel modelo = (DefaultTableModel) jtbSolicitacaoCartuchos.getModel();
        
        preencheNumeroSolicitacaoRecarga();
        jtfSolicitacaoEmissor.setText("");
        jtfSolicitacaoReceptor.setText("");
        jDateChooserDataEnvio.setDate(validaData.getDateAtual());

        modelo.setRowCount(0);
        
        abilitaCampos();

        desabilitaBotoes();
                
        opcao = "salvar";
        codigo = 0;
        
        solicitacaoRemanufatura = null;
        usuario = null;
        
    }

    public void abilitaCampos() {

        jtfSolicitacaoEmissor.setEditable(false);
        jtfSolicitacaoNumero.setEditable(false);
        jtfSolicitacaoReceptor.setEditable(false);
        jDateChooserDataEnvio.setEnabled(true);

    }

    public void desabilitaCampos() {
        
        jtfSolicitacaoEmissor.setEditable(false);
        jtfSolicitacaoNumero.setEditable(false);
        jtfSolicitacaoReceptor.setEditable(false);
        jDateChooserDataEnvio.setEnabled(false);
        
    }
    
    public void abilitaBotoes() {

        jbCancelar.setEnabled(true);
        
        if (solicitacaoRemanufatura.isSolicitacaoEnviada()) {
            jbImprimir.setEnabled(true);
        } else {
            jbImprimir.setEnabled(false);
        }

        if (solicitarRecarga) {
            
            if (solicitacaoRemanufatura.isSolicitacaoEnviada()) {
                jbFinalizarSolicitacao.setEnabled(false);
            } else {
                jbFinalizarSolicitacao.setEnabled(true);
            }
            
            jbExcluir.setEnabled(true);
            jbAlterar.setEnabled(true);
        } else {
            jbFinalizarSolicitacao.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        }

    }

    public void desabilitaBotoes() {

        jbCancelar.setEnabled(true);
        jbImprimir.setEnabled(false);

        if (solicitarRecarga) {
            jbFinalizarSolicitacao.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        } else {
            jbFinalizarSolicitacao.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        }

    }

    public void preencheNumeroSolicitacaoRecarga() {

        iniciaDao();
        //DAO dao = new DAO();

        jtfSolicitacaoNumero.setText("" + dao.getNumeroSolicitacaoRemanufatura(versao.getAno()));

    }
    
    public void run() {

        for (int i = 0; i == 0; i = 0) {
            try {
                //atualizaNumeroOficio();
                if (opcao.equals("salvar")) {
                    preencheNumeroSolicitacaoRecarga();
                }

                threadAtualizaNumeroSolicitacaoRecarga.sleep(10000);

                //this.finalize();
            } catch (Throwable ex) {
                //Logger.getLogger(AtualizaNumeroOficios.class.getName()).log(Level.SEVERE, null, ex);
                except.setMensagemErro("Não foi possivel atualizar o número da Solicitação!");
            }
        }

    }
    
    public void atualizarItemSelecionado() {
        
        iniciaClasseGeral();
            
        if (classeGeral.msgConfirma("Deseja alterar item selecionado?")) {
            
                
        }
        
    }
    
    public void excluirItemSelecionado() {
        
        iniciaClasseGeral();
            
        if (classeGeral.msgConfirma("Deseja excluir item selecionado?\n ")) {
            
            
        }
        
    }
    
//Geradores, Validadores===========================================================================================================================================
    public void verificaNumeroSolicitacaoRecarga() {

        iniciaDao();
        //DAO dao = new DAO();

        solicitacaoRecargaVerificada = dao.verificarSolicitacaoRecarga(jtfSolicitacaoNumero.getText(), versao.getAno());

    }

    public void iniciaCartucho() {
        
        if (cartucho == null) {
            cartucho = new Cartucho();
        }
        
    }
    
    public void iniciaClasseGeral() {

        if (classeGeral == null) {
            classeGeral = new ClasseGeral();
        }

    }

    public void iniciaCmei() {
        
        if (cmei == null) {
            cmei = new Cmei();
        }
        
    }
    
    public void iniciaDao() {

        if (dao == null) {
            dao = new DAO();
        }

    }
    
    public void iniciaEditaOrdemTabela() {
        
        if (editaOrdemTabela == null) {
            editaOrdemTabela = new EditaOrdemTabela();
        }
        
    }
    
    public void iniciaEscola() {
        
        if (escola == null) {
            escola = new Escola();
        }
        
    }
    
    public void iniciaLog() {
        
        if (geraLog == null) {
            geraLog = new Log();
        }
        
    }
    
    public void iniciaOutro() {
        
        if (outro == null) {
            outro = new Outro();
        }
        
    }
    
    public void iniciaSolicitacaoRemanufatura() {
        
        if (solicitacaoRemanufatura == null) {
            solicitacaoRemanufatura = new SolicitacaoRemanufatura();
        }
        
    }
    
    public void iniciaSolicitacaoRemanufaturaItens() {
        
        if (solicitacaoRemanufaturaItens == null) {
            solicitacaoRemanufaturaItens = new SolicitacaoRemanufaturaItens();
        }
        
    }
    
    public void iniciaUsuario() {
        
        if (usuario == null) {
            usuario = new Usuario();
        }
        
    }
    
    public void iniciaValidaData() {
        
        if (validaData == null) {
            validaData = new ValidaData();
        }
        
    }
    
    public void iniciaAtualizarItemSolicitacaoRecarga() {
        
        if (jdaisr == null) {
            jdaisr = new JdAtualizarItemSolicitacaoRecarga(this, true);
        }
        
    }
    
    /*public void validaDataResolucao() {

    String data = jftfDataResolucao.getText();
    DateFormat df = DateFormat.getInstance();

    try {
    df.parse(data);
    } catch (ParseException pe) {
    if (data.equals("  /  /    ")) {
    jftfDataResolucao.setText("");
    } else {
    jftfDataResolucao.setText("");
    JOptionPane.showMessageDialog(null, "Data Invalida, digite no formato dd/mm/aaaa", "Erro", 0, null);
    }
    }
    }

    public void validaDataSolicitacao() {

    String data = jftfDataSolicitacao.getText();
    DateFormat df = DateFormat.getInstance();

    try {
    df.parse(data);
    } catch (ParseException pe) {
    if (data.equals("  /  /    ")) {
    jftfDataSolicitacao.setText("");
    } else {
    jftfDataSolicitacao.setText("");
    JOptionPane.showMessageDialog(null, "Data Invalida, digite no formato dd/mm/aaaa", "Erro", 0, null);
    }
    }
    }*/
//Getters and Setters===========================================================================================================================================
    public String getHoraAtual() {

        GregorianCalendar calendar = new GregorianCalendar();
        Date data = calendar.getTime();

        String hora;
        String minuto;

        if (data.getHours() < 10) {
            hora = "0" + data.getHours();
        } else {
            hora = String.valueOf(data.getHours());
        }

        if (data.getMinutes() < 10) {
            minuto = "0" + data.getMinutes();
        } else {
            minuto = String.valueOf(data.getMinutes());
        }

        return hora + minuto;

    }

    public String getAno() {

        return "Ano de " + versao.getAno();

    }

    public void setNumeroCaracteres() {

        jtfSolicitacaoEmissor.setDocument(new FixedLengthDocument(120));
        jtfSolicitacaoReceptor.setDocument(new FixedLengthDocument(120));

    }

    public int getCodigoUsuario() {
        return codigoUsuario;
    }

    public void setCodigoUsuario(int codigoUsuario) {
        this.codigoUsuario = codigoUsuario;
        abilitaCampos();
        getPermissoes();
        desabilitaBotoes();
    }

    public String getTipoNomeEntidade() {
        return tipoNomeEntidade;
    }

    public void setTipoNomeEntidade(String tipoNomeEntidade) {
        this.tipoNomeEntidade = tipoNomeEntidade;
        jtfSolicitacaoEmissor.setText(tipoNomeEntidade);
    }

    public void getPermissoes() {
        Permissoes permissoes;
        iniciaDao();
        //DAO dao = new DAO();

        permissoes = (Permissoes) dao.buscaPermissoes(codigoUsuario);

        solicitarRecarga = permissoes.isSolicitarRecarga();

    }

    public void setSolicitacaoRemanufaturaBuscada(SolicitacaoRemanufatura solicitacaoBuscada) {

        if (solicitacaoBuscada == null) {
        } else {
            
            DefaultTableModel modelo = (DefaultTableModel) jtbSolicitacaoCartuchos.getModel();
            final TableRowSorter<TableModel> tabelaSorter = new TableRowSorter<TableModel>(modelo);
            jtbSolicitacaoCartuchos.setRowSorter(tabelaSorter);
            
            iniciaEditaOrdemTabela();
            
            jtfSolicitacaoEmissor.setText(solicitacaoBuscada.getEmissorSecretaria());
            jtfSolicitacaoNumero.setText(String.valueOf(solicitacaoBuscada.getNumeroSolicitacao()));
            jtfSolicitacaoReceptor.setText(solicitacaoBuscada.getReceptorEmpresa());
            
            jDateChooserDataEnvio.setDate(solicitacaoBuscada.getDataEnvio());
            
            preencheCartuchosNaTabela(solicitacaoBuscada);
            
            codigo = solicitacaoBuscada.getCodigoSolicitacaoRemanufatura();//para testar comando excluir
            solicitacaoRemanufatura = solicitacaoBuscada;
            solicitacaoRemanufatura.setCodigoSolicitacaoRemanufatura(codigo);
            
            editaOrdemTabela.sortAllRowsBy(modelo, 2, true);
            
            desabilitaCampos();

            opcao = "alterar";

            abilitaBotoes();

        }
        
    }

    public SolicitacaoRemanufatura getSolicitacaoRemanufatura() {
        return solicitacaoRemanufatura;
    }

    public void setSolicitacaoRemanufatura(SolicitacaoRemanufatura solicitacaoRemanufatura) {
        
        this.solicitacaoRemanufatura = solicitacaoRemanufatura;
        
        jtfSolicitacaoEmissor.setText(solicitacaoRemanufatura.getEmissorSecretaria());
        jtfSolicitacaoReceptor.setText(solicitacaoRemanufatura.getReceptorEmpresa());
        jtfSolicitacaoNumero.setText(String.valueOf(solicitacaoRemanufatura.getNumeroSolicitacao()));
        
        jDateChooserDataEnvio.setDate(solicitacaoRemanufatura.getDataEnvio());
        
        preencheCartuchosNaTabela(solicitacaoRemanufatura);
        
        codigo = solicitacaoRemanufatura.getCodigoSolicitacaoRemanufatura();//para testar comando excluir

        desabilitaCampos();

        opcao = "alterar";

        abilitaBotoes();
        
    }
    
    public void setNullSolicitacaoRemanufatura() {
        this.solicitacaoRemanufatura = null;
    }
    
    public void preencheCartuchosNaTabela(SolicitacaoRemanufatura tabelaSolicitacao) {
        
        DefaultTableModel modelo = (DefaultTableModel) jtbSolicitacaoCartuchos.getModel();
        
        modelo.setRowCount(0);
        
        iniciaDao();
        
        List listaSolicitacaoRemanufaturaItens = new ArrayList();
        
        listaSolicitacaoRemanufaturaItens = dao.listarSolicitacaoRemanufaturaItens(tabelaSolicitacao.getCodigoSolicitacaoRemanufatura(), 0);
        
        for (int i = 0; i < listaSolicitacaoRemanufaturaItens.size(); i++) {

            iniciaCartucho();
            iniciaSolicitacaoRemanufaturaItens();
            String nomeUnidade = "";
            
            solicitacaoRemanufaturaItens = (SolicitacaoRemanufaturaItens) listaSolicitacaoRemanufaturaItens.get(i);
            
            cartucho = (Cartucho) dao.busca(cartucho, solicitacaoRemanufaturaItens.getCartucho().getCodigoCartucho());
            
            switch (cartucho.getTipoEntidade()) {
                
                case "CMEI":
                    nomeUnidade = cartucho.getCmei().getNomeCmei();
                    break;
                    
                case "ESCOLA":
                    nomeUnidade = cartucho.getEscola().getNomeEscola();
                    break;
                    
                case "OUTROS":
                    nomeUnidade = cartucho.getOutro().getNomeOutro();
                    break;
                    
            }
            
            modelo.addRow(new String[]{String.valueOf(i + 1), cartucho.getTipoEntidade(), nomeUnidade, cartucho.getModeloCartucho().getNomeModeloCartucho(), cartucho.getCodigoBarra()});

            solicitacaoRemanufaturaItens = null;
            cartucho = null;
        }
        
    }
    
//Metodos DAO===========================================================================================================================================
    public void salvar() {

        iniciaDao();
        iniciaSolicitacaoRemanufatura();
        iniciaUsuario();
        iniciaValidaData();
        
        usuario = (Usuario) dao.busca(usuario, codigoUsuario);

        solicitacaoRemanufatura.setAno(versao.getAno());
        
        if (jDateChooserDataEnvio.getDate() == null) {
            jDateChooserDataEnvio.setDate(validaData.getDateAtual());
        }
        
        solicitacaoRemanufatura.setDataEnvio(jDateChooserDataEnvio.getDate());
        solicitacaoRemanufatura.setEmissorSecretaria(jtfSolicitacaoEmissor.getText());
        solicitacaoRemanufatura.setNumeroSolicitacao(Integer.valueOf(jtfSolicitacaoNumero.getText()));
        solicitacaoRemanufatura.setReceptorEmpresa(jtfSolicitacaoReceptor.getText());
        solicitacaoRemanufatura.setSolicitacaoEnviada(true);
        solicitacaoRemanufatura.setUsuario(usuario);
        
        try {
            iniciaLog();
            geraLog.criaLog(codigoUsuario, "Solicitação Remanufatura", "Tentou Salvar Nº " + solicitacaoRemanufatura.getNumeroSolicitacao() + " Emitido por " + solicitacaoRemanufatura.getEmissorSecretaria()+ " e Recebido por " + solicitacaoRemanufatura.getReceptorEmpresa());
        } catch (IOException ex) {
            Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        dao.inserir(solicitacaoRemanufatura, 7, codigoUsuario);

    }

    public void atualizar() {

        iniciaDao();
        iniciaSolicitacaoRemanufatura();

        solicitacaoRemanufatura.setAno(versao.getAno());
        solicitacaoRemanufatura.setCodigoSolicitacaoRemanufatura(codigo);
        
        if (jDateChooserDataEnvio.getDate() == null) {
            jDateChooserDataEnvio.setDate(validaData.getDateAtual());
        }
        
        solicitacaoRemanufatura.setDataEnvio(jDateChooserDataEnvio.getDate());
        solicitacaoRemanufatura.setEmissorSecretaria(jtfSolicitacaoEmissor.getText());
        solicitacaoRemanufatura.setNumeroSolicitacao(Integer.valueOf(jtfSolicitacaoNumero.getText()));
        solicitacaoRemanufatura.setReceptorEmpresa(jtfSolicitacaoReceptor.getText());
        solicitacaoRemanufatura.setSolicitacaoEnviada(true);
        solicitacaoRemanufatura.setUsuario(usuario);

        try {
            iniciaLog();
            geraLog.criaLog(codigoUsuario, "Solicitação Remanufatura", "Tentou Atualizar Nº " + solicitacaoRemanufatura.getNumeroSolicitacao() + " Emitido por " + solicitacaoRemanufatura.getEmissorSecretaria()+ " e Recebido por " + solicitacaoRemanufatura.getReceptorEmpresa());
        } catch (IOException ex) {
            Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        dao.atualizar(solicitacaoRemanufatura, 7, codigoUsuario);

    }

    public void excluir() {

        iniciaClasseGeral();

         if (classeGeral.msgConfirma("Deseja excluir a Solicitação?")) {

            iniciaDao();
            iniciaSolicitacaoRemanufatura();
            
            try {
                iniciaLog();
                geraLog.criaLog(codigoUsuario, "Solicitação Remanufatura", "Tentou Excluir Nº " + solicitacaoRemanufatura.getNumeroSolicitacao() + " Código: " + solicitacaoRemanufatura.getCodigoSolicitacaoRemanufatura());
            } catch (IOException ex) {
                Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            dao.excluir(solicitacaoRemanufatura, codigoUsuario);
            cancelar();

        }

    }

}
