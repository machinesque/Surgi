 /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * jfAgendamento.java
 *
 * 
 *
 * Created on 27/01/2010, 09:03:31
 */
package visual;

import conexao.Conexao;
import controlador.*;
import dao.DAO;
import excecoes.ExcCadastro;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import modelo.Agendamento;
import modelo.Cmei;
import modelo.Escola;
import modelo.Outro;
import modelo.Permissoes;
import modelo.Usuario;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
//import rex.showclass.className;

/**
 *
 * @author luiz
 */
public class JfAgendamento extends javax.swing.JFrame{

    private static ControleVersao versao = new ControleVersao();
    private Agendamento agendamento;
    private ClasseGeral classeGeral;
    private Cmei cmei;
    private ControleCmei controleCmei;
    private ControleEscola controleEscola;
    private ControleImagem controleImagem = new ControleImagem();
    private ControleUsuario controleUsuario;
    private ControleOutro controleOutro;
    private DAO dao;
    private Escola escola;
    private Formatos formato = new Formatos();
    private Log geraLog;
    private Outro outro;
    private Usuario usuario;
    private VerificadorDataPeriodo verificadorDataPeriodo;
    
    private JasperPrint jPrint;
    private JasperViewer jViewer;
    private JdBuscaAgendamento jdba;

    private int codigo = 0;
    private int codigoUsuario;
    private String tipoEntid = "ESCOLA";
    private String opcao = "salvar";
    private String tipoAgend;
    private boolean agendarAgendamento;
    private boolean agendarAgendamentoBuscar;
    private boolean colocarEmAtendimentoAgendamento;

    /** Creates new form jfAgendamento */
    public JfAgendamento() {
        super("Agendamento - " + versao.getVersao() + " - " + versao.getAno());
        initComponents();

        //Altera icone na barra de titulo
        Toolkit kit = Toolkit.getDefaultToolkit();
        Image img = kit.getImage("C:/SURGI/imagens/SURGI32x32.png");
        this.setIconImage(img);

        //maximiza tela
        //this.setExtendedState(MAXIMIZED_BOTH);

        //centraliza tela
        setSize(getWidth(), getHeight());
        setLocationRelativeTo(null);

        try {
            jftfHoraSolicitacao.setFormatterFactory(formato.getFormatoHora());
        } catch (ParseException ex) {
            iniciaClasseGeral();
            Logger.getLogger(JfAgendamento.class.getName()).log(Level.SEVERE, null, ex);
            classeGeral.msgErro("NÃ£o foi possivel formatar campo de Hora Solicitacao, \n Contate o Administrador!");
        }

        jlbAnoAgendamento.setText(getAno());
        jDateChooserSolicitacao.setDate(getDateHoje());
        jrbEscola.setSelected(true);

        preencheComboEscolas();

        preencheComboUsuarios();

        setNumeroCaracteres();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgAgendamento = new javax.swing.ButtonGroup();
        btgTipoAgendamento = new javax.swing.ButtonGroup();
        btgRecolhimentoMaquina = new javax.swing.ButtonGroup();
        jpBotoes = new javax.swing.JPanel();
        jbSalvar = new javax.swing.JButton();
        jbBuscar = new javax.swing.JButton();
        jbCancelar = new javax.swing.JButton();
        jbExcluir = new javax.swing.JButton();
        jbAlterar = new javax.swing.JButton();
        jbImprimir = new javax.swing.JButton();
        jpAgendamento = new javax.swing.JPanel();
        jlbAnoAgendamento = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtfLocalEntidade = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jspProblemaInformado = new javax.swing.JScrollPane();
        jtaProblemaInformado = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jspProblemaConstatado = new javax.swing.JScrollPane();
        jtaProblemaConstatado = new javax.swing.JTextArea();
        jcbStatus = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jcbNomeEntidade = new javax.swing.JComboBox();
        jrbEscola = new javax.swing.JRadioButton();
        jrbCmei = new javax.swing.JRadioButton();
        jDateChooserSolicitacao = new com.toedter.calendar.JDateChooser();
        jDateChooserResolucao = new com.toedter.calendar.JDateChooser();
        jrbOutros = new javax.swing.JRadioButton();
        jcbNomeUsuario = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jcbNomeUsuarioAtendimento = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jDateChooserRecolhimento = new com.toedter.calendar.JDateChooser();
        jLabel12 = new javax.swing.JLabel();
        jrbTipoAgendamentoNormal = new javax.swing.JRadioButton();
        jrbTipoAgendamentoPontoDigital = new javax.swing.JRadioButton();
        jrbTipoAgendamentoOficio = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        jftfHoraSolicitacao = new javax.swing.JFormattedTextField();
        jrbRecolheuMaquinaSim = new javax.swing.JRadioButton();
        jrbRecolheuMaquinaNao = new javax.swing.JRadioButton();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpBotoes.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());
        jpBotoes.setPreferredSize(new java.awt.Dimension(1024, 67));

        jbSalvar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/OK.png"))); // NOI18N
        jbSalvar.setMnemonic('s');
        jbSalvar.setText("Salvar");
        jbSalvar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbBuscar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/pesquisar.png"))); // NOI18N
        jbBuscar.setMnemonic('b');
        jbBuscar.setText("Buscar");
        jbBuscar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbCancelar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cancelar.png"))); // NOI18N
        jbCancelar.setMnemonic('z');
        jbCancelar.setText("Cancelar");
        jbCancelar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jbExcluir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/delete.png"))); // NOI18N
        jbExcluir.setMnemonic('e');
        jbExcluir.setText("Excluir");
        jbExcluir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbExcluir.setEnabled(false);
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbAlterar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/reload.png"))); // NOI18N
        jbAlterar.setMnemonic('a');
        jbAlterar.setText("Alterar");
        jbAlterar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbAlterar.setEnabled(false);
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarActionPerformed(evt);
            }
        });

        jbImprimir.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jbImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/imprimir.png"))); // NOI18N
        jbImprimir.setMnemonic('i');
        jbImprimir.setText("Imprimir");
        jbImprimir.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jbImprimir.setEnabled(false);
        jbImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpBotoesLayout = new javax.swing.GroupLayout(jpBotoes);
        jpBotoes.setLayout(jpBotoesLayout);
        jpBotoesLayout.setHorizontalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBotoesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpBotoesLayout.setVerticalGroup(
            jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jpAgendamento.setBorder(new org.jdesktop.swingx.border.DropShadowBorder());

        jlbAnoAgendamento.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlbAnoAgendamento.setText("Ano Agendamento");
        jlbAnoAgendamento.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Tipo Entidade: ");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Unidade: ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Data SolicitaÃ§Ã£o: ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Data ResoluÃ§Ã£o: ");

        jtfLocalEntidade.setBackground(new java.awt.Color(204, 204, 255));
        jtfLocalEntidade.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtfLocalEntidade.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtfLocalEntidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfLocalEntidadeFocusLost(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Local: ");

        jtaProblemaInformado.setBackground(new java.awt.Color(204, 204, 255));
        jtaProblemaInformado.setColumns(20);
        jtaProblemaInformado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtaProblemaInformado.setLineWrap(true);
        jtaProblemaInformado.setRows(5);
        jtaProblemaInformado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtaProblemaInformado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtaProblemaInformadoFocusLost(evt);
            }
        });
        jspProblemaInformado.setViewportView(jtaProblemaInformado);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Problema Informado: ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Problema Constatado/SoluÃ§Ã£o: ");

        jtaProblemaConstatado.setColumns(20);
        jtaProblemaConstatado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jtaProblemaConstatado.setLineWrap(true);
        jtaProblemaConstatado.setRows(5);
        jtaProblemaConstatado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jtaProblemaConstatado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtaProblemaConstatadoFocusLost(evt);
            }
        });
        jspProblemaConstatado.setViewportView(jtaProblemaConstatado);

        jcbStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AGENDADO", "EM ATENDIMENTO", "ATENDIDO" }));
        jcbStatus.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Status: ");

        jcbNomeEntidade.setBackground(new java.awt.Color(204, 204, 255));
        jcbNomeEntidade.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbNomeEntidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        jcbNomeEntidade.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btgAgendamento.add(jrbEscola);
        jrbEscola.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbEscola.setSelected(true);
        jrbEscola.setText("Escola");
        jrbEscola.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jrbEscola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbEscolaActionPerformed(evt);
            }
        });

        btgAgendamento.add(jrbCmei);
        jrbCmei.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbCmei.setText("Cmei");
        jrbCmei.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jrbCmei.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbCmeiActionPerformed(evt);
            }
        });

        jDateChooserSolicitacao.setBackground(new java.awt.Color(204, 204, 255));
        jDateChooserSolicitacao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(204, 204, 255), new java.awt.Color(204, 204, 255), null, new java.awt.Color(204, 204, 255)));
        jDateChooserSolicitacao.setEnabled(false);
        jDateChooserSolicitacao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jDateChooserResolucao.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDateChooserResolucao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btgAgendamento.add(jrbOutros);
        jrbOutros.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbOutros.setText("Outros");
        jrbOutros.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jrbOutros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbOutrosActionPerformed(evt);
            }
        });

        jcbNomeUsuario.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbNomeUsuario.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("UsuÃ¡rio: ");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Atendido Por: ");

        jcbNomeUsuarioAtendimento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jcbNomeUsuarioAtendimento.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Data Recolhimento: ");

        jDateChooserRecolhimento.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDateChooserRecolhimento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("Tipo de Agendamento: ");

        btgTipoAgendamento.add(jrbTipoAgendamentoNormal);
        jrbTipoAgendamentoNormal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbTipoAgendamentoNormal.setSelected(true);
        jrbTipoAgendamentoNormal.setText("Normal");
        jrbTipoAgendamentoNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTipoAgendamentoNormalActionPerformed(evt);
            }
        });

        btgTipoAgendamento.add(jrbTipoAgendamentoPontoDigital);
        jrbTipoAgendamentoPontoDigital.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbTipoAgendamentoPontoDigital.setText("Ponto Digital");
        jrbTipoAgendamentoPontoDigital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTipoAgendamentoPontoDigitalActionPerformed(evt);
            }
        });

        btgTipoAgendamento.add(jrbTipoAgendamentoOficio);
        jrbTipoAgendamentoOficio.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jrbTipoAgendamentoOficio.setText("OfÃ­cio");
        jrbTipoAgendamentoOficio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbTipoAgendamentoOficioActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel13.setText("Hora SolicitaÃ§Ã£o: ");

        jftfHoraSolicitacao.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jftfHoraSolicitacao.setEnabled(false);
        jftfHoraSolicitacao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btgRecolhimentoMaquina.add(jrbRecolheuMaquinaSim);
        jrbRecolheuMaquinaSim.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jrbRecolheuMaquinaSim.setText("Sim");

        btgRecolhimentoMaquina.add(jrbRecolheuMaquinaNao);
        jrbRecolheuMaquinaNao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jrbRecolheuMaquinaNao.setText("NÃ£o");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("Recolheu alguma MÃ¡quina: ");

        javax.swing.GroupLayout jpAgendamentoLayout = new javax.swing.GroupLayout(jpAgendamento);
        jpAgendamento.setLayout(jpAgendamentoLayout);
        jpAgendamentoLayout.setHorizontalGroup(
            jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAgendamentoLayout.createSequentialGroup()
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jlbAnoAgendamento))
                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                        .addGap(53, 53, 53)
                                        .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel3)))
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jcbStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                            .addComponent(jftfHoraSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jDateChooserResolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                            .addComponent(jDateChooserSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel11)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jDateChooserRecolhimento, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                        .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jcbNomeUsuarioAtendimento, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jspProblemaInformado, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE)
                                            .addComponent(jtfLocalEntidade, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jcbNomeEntidade, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jcbNomeUsuario, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(324, 324, 324))))
                            .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jrbTipoAgendamentoNormal)
                                    .addComponent(jrbEscola))
                                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addComponent(jrbTipoAgendamentoPontoDigital)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jrbTipoAgendamentoOficio))
                                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jrbCmei)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jrbOutros))))
                            .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel14))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpAgendamentoLayout.createSequentialGroup()
                                        .addComponent(jrbRecolheuMaquinaSim)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jrbRecolheuMaquinaNao))
                                    .addComponent(jspProblemaConstatado, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpAgendamentoLayout.setVerticalGroup(
            jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpAgendamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlbAnoAgendamento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jrbCmei)
                    .addComponent(jrbOutros)
                    .addComponent(jrbEscola))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jrbTipoAgendamentoNormal)
                    .addComponent(jrbTipoAgendamentoPontoDigital)
                    .addComponent(jrbTipoAgendamentoOficio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbNomeUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcbNomeEntidade, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(jDateChooserSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jDateChooserRecolhimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jDateChooserResolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel13)
                    .addComponent(jftfHoraSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtfLocalEntidade, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel10)
                    .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jspProblemaInformado, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbNomeUsuarioAtendimento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jspProblemaConstatado, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpAgendamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrbRecolheuMaquinaSim)
                    .addComponent(jrbRecolheuMaquinaNao)
                    .addComponent(jLabel14))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, 1004, Short.MAX_VALUE)
            .addComponent(jpAgendamento, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1004, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpAgendamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        fechar();
    }//GEN-LAST:event_formWindowClosing

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed

        if (jdba == null) {
            jdba = new JdBuscaAgendamento(null, true);
        }

        jdba.setCodigoUsuario(codigoUsuario);
        jdba.setTipoAgend("AGENDAMENTO");
        jdba.setVisible(true);

        setAgendamentoBuscado(jdba.getAgendamento());
        jdba.setAgendamento();

    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarActionPerformed

        abilitaCampos();

        jbAlterar.setEnabled(false);

        if (!jcbStatus.getSelectedItem().equals("ATENDIDO")) {
            jcbNomeUsuarioAtendimento.setSelectedItem(controleUsuario.getNomeUsuario(codigoUsuario));
        }

        opcao = "alterar";

        jbSalvar.setEnabled(true);

    }//GEN-LAST:event_jbAlterarActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        cancelar();
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed

        if (jDateChooserResolucao.getDate() != null) {
                
            iniciaVerificadorDataPeriodo();
        
            if (verificadorDataPeriodo.verificaDatas(jDateChooserSolicitacao.getDate(), jDateChooserResolucao.getDate())) {
            
                iniciaClasseGeral();
                classeGeral.msgAtencao("Data de ResoluÃ§Ã£o nÃ£o Ã© vÃ¡lida com relaÃ§Ã£o a Data de SolicitaÃ§Ã£o!'");
                jDateChooserResolucao.setDate(null);
            
            }
        }
        
        if (verificaResolucao()) {

            iniciaClasseGeral();
            classeGeral.msgAtencao("Preencha os campos 'Data ResoluÃ§Ã£o', 'Atendido por', 'Problema constatado' \n Ou marque a opÃ§Ã£o ser recolheu, ou nÃ£o, alguma mÃ¡quina \n Ou altere o 'Status' para 'Atendido'!");

        } else {

            if (opcao.equals("salvar")) {

                if (!verificaAgendamentoExistente().isEmpty()) {

                    iniciaClasseGeral();

                    if (classeGeral.msgConfirmaOpcao("JÃ¡ existe um Agendamento Cadastrastrado!\n Deseja Salvar/Criar um novo Agendamento? \n Clique em 'NÃO' para buscar e complementar o Agendamento jÃ¡ existente! \n Clique em 'SIM' para Salvar/Criar o novo agendamento!")) {
                        salvar();
                        opcao = "salvar";
                    }

                } else {
                    salvar();
                    opcao = "salvar";
                }

            } else if (opcao.equals("alterar")) {

                atualizar();
                opcao = "salvar";

            }

        }

    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        excluir();
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImprimirActionPerformed

        //ADOGeral ag = new ADOGeral();
        Conexao conexao = new Conexao();
        HashMap parametros = new HashMap();
        try {
            //System.out.println(codigoRegistro);
            //parametros.put("titulo", "Titulo Relatorio");
            parametros.put("codigoAgendado", new Integer(codigo));
            //parametros.put("codigo", lista.get(0).getNome();
            //ADOGeral.conectar();
            conexao.getConexao();
        } catch (ExcCadastro ex) {
            Logger.getLogger(JfImpressosAgendamento.class.getName()).log(Level.SEVERE, null, ex);
        }

        //        JRDataSource jrds = new JRBeanCollectionDataSource(lista);

        try {

            switch (tipoEntid) {
                
                case "CMEI":
                    jPrint = JasperFillManager.fillReport("AgendamentoPorCodigoCmei.jasper", parametros, conexao.getConexao());
                    break;
                    
                case "ESCOLA":
                    jPrint = JasperFillManager.fillReport("AgendamentoPorCodigoEscola.jasper", parametros, conexao.getConexao());
                    break;
                    
                case "OUTROS":
                    jPrint = JasperFillManager.fillReport("AgendamentoPorCodigoOutro.jasper", parametros, conexao.getConexao());
                    break;
                
            } 
            //jReport = JasperCompileManager.compileReport("E:/LUIZ/PROJETOS JAVA/CORPORATIVO/m2GestaoClinicas/FichaPaciente.jrxml");
            //jPrint = JasperFillManager.fillReport("C:/m2GestaoClinicas/FichaPaciente.jasper", parametros, ADOGeral.getConexao());
            //jPrint = JasperFillManager.fillReport("AgendamentoPorCodigo.jasper", parametros, conexao.getConexao());
            //jPrint = JasperFillManager.fillReport(jReport, parametros, jrds);

            //if (!(jViewer == null)) {
            //jViewer = new JasperViewer(jPrint, false);
            //jViewer.setExtendedState(JFrame.MAXIMIZED_BOTH);
            jViewer.viewReport(jPrint, false);
            //}

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_jbImprimirActionPerformed

    private void jtfLocalEntidadeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfLocalEntidadeFocusLost
        jtfLocalEntidade.setText(jtfLocalEntidade.getText().toUpperCase());
        
        if (jtfLocalEntidade.getText().equals("PONTO") || jtfLocalEntidade.getText().equals("PONTO DIGITAL")) {
            
            tipoAgend = "AGENDAMENTO PONTO DIGITAL";
            jrbTipoAgendamentoPontoDigital.setSelected(true);
            jtfLocalEntidade.setText("PONTO DIGITAL");
            jtfLocalEntidade.setEditable(false);
            
        } else if (jtfLocalEntidade.getText().contains("OFÃCIO") || jtfLocalEntidade.getText().contains("OFICIO")) {
            
            tipoAgend = "AGENDAMENTO OFICIO";
            jrbTipoAgendamentoOficio.setSelected(true);
            jtfLocalEntidade.setText("OFÃCIO");
            jtfLocalEntidade.setEditable(true);
            
        } else {
            
            tipoAgend = "AGENDAMENTO NORMAL";
            jrbTipoAgendamentoNormal.setSelected(true);
            jtfLocalEntidade.setEditable(true);
            
        }
}//GEN-LAST:event_jtfLocalEntidadeFocusLost

    private void jtaProblemaInformadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtaProblemaInformadoFocusLost
        jtaProblemaInformado.setText(jtaProblemaInformado.getText().toUpperCase());
}//GEN-LAST:event_jtaProblemaInformadoFocusLost

    private void jtaProblemaConstatadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtaProblemaConstatadoFocusLost
        jtaProblemaConstatado.setText(jtaProblemaConstatado.getText().toUpperCase());
}//GEN-LAST:event_jtaProblemaConstatadoFocusLost

    private void jrbEscolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbEscolaActionPerformed

        if (jrbEscola.isSelected()) {
            preencheComboEscolas();
            tipoEntid = "ESCOLA";
        }
    }//GEN-LAST:event_jrbEscolaActionPerformed

    private void jrbCmeiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbCmeiActionPerformed

        if (jrbCmei.isSelected()) {
            preencheComboCmeis();
            tipoEntid = "CMEI";
        }
    }//GEN-LAST:event_jrbCmeiActionPerformed

    private void jrbOutrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbOutrosActionPerformed

        if (jrbOutros.isSelected()) {
            preencheComboOutros();
            tipoEntid = "OUTROS";
        }
    }//GEN-LAST:event_jrbOutrosActionPerformed

    private void jrbTipoAgendamentoPontoDigitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTipoAgendamentoPontoDigitalActionPerformed
        jtfLocalEntidade.setText("PONTO DIGITAL");
        jtfLocalEntidade.setEditable(false);
        tipoAgend = "AGENDAMENTO PONTO DIGITAL";
    }//GEN-LAST:event_jrbTipoAgendamentoPontoDigitalActionPerformed

    private void jrbTipoAgendamentoNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTipoAgendamentoNormalActionPerformed
        jtfLocalEntidade.setText("");
        jtfLocalEntidade.setEditable(true);
        tipoAgend = "AGENDAMENTO NORMAL";
    }//GEN-LAST:event_jrbTipoAgendamentoNormalActionPerformed

    private void jrbTipoAgendamentoOficioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbTipoAgendamentoOficioActionPerformed
        jtfLocalEntidade.setText("OFÃCIO");
        jtfLocalEntidade.setEditable(true);
        tipoAgend = "AGENDAMENTO OFICIO";
    }//GEN-LAST:event_jrbTipoAgendamentoOficioActionPerformed
    /**
     * @param args the command line arguments
     */
    /*public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
    public void run() {
    new jfAgendamento().setVisible(true);
    }
    });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgAgendamento;
    private javax.swing.ButtonGroup btgRecolhimentoMaquina;
    private javax.swing.ButtonGroup btgTipoAgendamento;
    private com.toedter.calendar.JDateChooser jDateChooserRecolhimento;
    private com.toedter.calendar.JDateChooser jDateChooserResolucao;
    private com.toedter.calendar.JDateChooser jDateChooserSolicitacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton jbAlterar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbImprimir;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JComboBox jcbNomeEntidade;
    private javax.swing.JComboBox jcbNomeUsuario;
    private javax.swing.JComboBox jcbNomeUsuarioAtendimento;
    private javax.swing.JComboBox jcbStatus;
    private javax.swing.JFormattedTextField jftfHoraSolicitacao;
    private javax.swing.JLabel jlbAnoAgendamento;
    private javax.swing.JPanel jpAgendamento;
    private javax.swing.JPanel jpBotoes;
    private javax.swing.JRadioButton jrbCmei;
    private javax.swing.JRadioButton jrbEscola;
    private javax.swing.JRadioButton jrbOutros;
    private javax.swing.JRadioButton jrbRecolheuMaquinaNao;
    private javax.swing.JRadioButton jrbRecolheuMaquinaSim;
    private javax.swing.JRadioButton jrbTipoAgendamentoNormal;
    private javax.swing.JRadioButton jrbTipoAgendamentoOficio;
    private javax.swing.JRadioButton jrbTipoAgendamentoPontoDigital;
    private javax.swing.JScrollPane jspProblemaConstatado;
    private javax.swing.JScrollPane jspProblemaInformado;
    private javax.swing.JTextArea jtaProblemaConstatado;
    private javax.swing.JTextArea jtaProblemaInformado;
    private javax.swing.JTextField jtfLocalEntidade;
    // End of variables declaration//GEN-END:variables

//Outros Metodos ===========================================================================================================================================
    public void fechar() {

        if (jcbNomeEntidade.getSelectedIndex() != 0 || !jtfLocalEntidade.getText().isEmpty() || !jtaProblemaInformado.getText().isEmpty() || !jtaProblemaConstatado.getText().isEmpty()) {

            iniciaClasseGeral();
            classeGeral.msgAtencao("Cancele ou Salve o Agendamento em EdiÃ§Ã£o!");

        } else {

            dao = null;
            cancelar();
            this.dispose();
        }
    }

    public void cancelar() {

        iniciaAgendamento();
        
        agendamento = null;

        jrbEscola.setSelected(true);
        tipoEntid = "ESCOLA";
        jrbTipoAgendamentoNormal.setSelected(true);
        tipoAgend = "AGENDAMENTO NORMAL";
        preencheComboEscolas();
        jcbNomeEntidade.setSelectedIndex(0);
        jDateChooserSolicitacao.setDate(getDateHoje());
        jDateChooserRecolhimento.setDate(null);
        jDateChooserResolucao.setDate(null);
        jtaProblemaInformado.setText("");
        jtaProblemaConstatado.setText("");
        jtfLocalEntidade.setText("");
        jcbStatus.setSelectedIndex(0);
        jftfHoraSolicitacao.setText(getHoraAtual());
        btgRecolhimentoMaquina.clearSelection();

        preencheComboUsuarios();

        abilitaCampos();

        jcbNomeUsuario.setSelectedItem(controleUsuario.getNomeUsuario(codigoUsuario));
        jcbNomeUsuarioAtendimento.setSelectedItem(controleUsuario.getNomeUsuario(codigoUsuario));

        desabilitaBotoes();

        opcao = "salvar";
        codigo = 0;

    }

    public void abilitaCampos() {

        jrbEscola.setEnabled(true);
        jrbCmei.setEnabled(true);
        jrbOutros.setEnabled(true);
        jrbTipoAgendamentoPontoDigital.setEnabled(true);
        jrbTipoAgendamentoNormal.setEnabled(true);
        jrbTipoAgendamentoOficio.setEnabled(true);
        jcbNomeEntidade.setEnabled(true);
        jDateChooserRecolhimento.setEnabled(true);
        jDateChooserResolucao.setEnabled(true);
        jtaProblemaInformado.setEditable(true);
        jtaProblemaConstatado.setEditable(true);
        jtfLocalEntidade.setEditable(true);
        jcbStatus.setEnabled(true);
        jcbNomeUsuario.setEnabled(true);
        jcbNomeUsuarioAtendimento.setEnabled(true);

    }

    public void desabilitaCampos() {
        
        jrbEscola.setEnabled(false);
        jrbCmei.setEnabled(false);
        jrbOutros.setEnabled(false);
        jrbTipoAgendamentoPontoDigital.setEnabled(false);
        jrbTipoAgendamentoNormal.setEnabled(false);
        jrbTipoAgendamentoOficio.setEnabled(false);
        jcbNomeEntidade.setEnabled(false);
        jDateChooserSolicitacao.setEnabled(false);
        jDateChooserResolucao.setEnabled(false);
        jDateChooserRecolhimento.setEnabled(false);
        jtaProblemaInformado.setEditable(false);
        jtaProblemaConstatado.setEditable(false);
        jtfLocalEntidade.setEditable(false);
        jcbStatus.setEnabled(false);
        jcbNomeUsuario.setEnabled(false);
        jcbNomeUsuarioAtendimento.setEnabled(false);
        
    }
    
    public void abilitaBotoes() {

        jbCancelar.setEnabled(true);
        jbImprimir.setEnabled(true);

        if (agendarAgendamentoBuscar) {
            jbBuscar.setEnabled(true);
        } else {
            jbBuscar.setEnabled(false);
        }

        if (agendarAgendamento == true) {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(true);
            jbAlterar.setEnabled(true);
        } else {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        }

    }

    public void desabilitaBotoes() {

        jbCancelar.setEnabled(true);
        jbImprimir.setEnabled(false);

        if (agendarAgendamentoBuscar) {
            jbBuscar.setEnabled(true);
        } else {
            jbBuscar.setEnabled(false);
        }

        if (agendarAgendamento == true) {
            jbSalvar.setEnabled(true);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        } else {
            jbSalvar.setEnabled(false);
            jbExcluir.setEnabled(false);
            jbAlterar.setEnabled(false);
        }

    }

    public void preencheComboEscolas() {

        iniciaDao();
        
        List listaEscolas = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaEscolas = dao.listarEscolas(0, "", "");

        for (int i = 0; i < listaEscolas.size(); i++) {
            iniciaEscola();
            escola = (Escola) listaEscolas.get(i);
            jcbNomeEntidade.addItem(escola.getNomeEscola());
        }

    }

    public void preencheComboCmeis() {

        iniciaDao();
        
        List listaCmeis = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaCmeis = dao.listarCmeis(0, "", "");

        for (int i = 0; i < listaCmeis.size(); i++) {
            iniciaCmei();
            cmei = (Cmei) listaCmeis.get(i);
            jcbNomeEntidade.addItem(cmei.getNomeCmei());
        }
    }

    public void preencheComboOutros() {

        iniciaDao();
        
        List listaOutros = new ArrayList();

        jcbNomeEntidade.removeAllItems();
        jcbNomeEntidade.addItem("");

        listaOutros = dao.listarOutros(0, "", "");

        for (int i = 0; i < listaOutros.size(); i++) {
            iniciaOutro();
            outro = (Outro) listaOutros.get(i);
            jcbNomeEntidade.addItem(outro.getNomeOutro());
        }

    }

    public void preencheComboUsuarios() {

        iniciaDao();
        
        Usuario user = new Usuario();
        List listaUsuarios = new ArrayList();

        jcbNomeUsuario.removeAllItems();
        jcbNomeUsuarioAtendimento.removeAllItems();
        jcbNomeUsuario.addItem("");
        jcbNomeUsuarioAtendimento.addItem("");

        listaUsuarios = dao.listarUsuarios(0, "", "", false);

        for (int i = 0; i < listaUsuarios.size(); i++) {
            user = (Usuario) listaUsuarios.get(i);
            jcbNomeUsuario.addItem(user.getNomeUsuario());
            jcbNomeUsuarioAtendimento.addItem(user.getNomeUsuario());
        }

    }

    public void preencheComboStatus() {
        
        iniciaDao();
        
        jcbStatus.removeAllItems();
        
        if (colocarEmAtendimentoAgendamento) {
            jcbStatus.addItem("AGENDADO");
            jcbStatus.addItem("EM ATENDIMENTO");
            jcbStatus.addItem("ATENDIDO");
        } else {
            jcbStatus.addItem("AGENDADO");
            jcbStatus.addItem("ATENDIDO");
        }
        
    }
    
    public void atualizaHora() {
        jftfHoraSolicitacao.setText(getHoraAtual());
    }

//Geradores, Validadores===========================================================================================================================================
    public void iniciaAgendamento() {
        
        if (agendamento == null) {
            agendamento = new Agendamento();
        }
        
    }
    
    public void iniciaClasseGeral() {

        if (classeGeral == null) {
            classeGeral = new ClasseGeral();
        }

    }
    
    public void iniciaCmei() {
        
        if (cmei == null) {
            cmei = new Cmei();
        }
        
    }
    
    public void iniciaControleCmei() {
        
        if (controleCmei == null) {
            controleCmei = new ControleCmei();
        }
        
    }
    
    public void iniciaControleEscola() {
        
        if (controleEscola == null) {
            controleEscola = new ControleEscola();
        }
        
    }
    
    public void iniciaControleOutro() {
        
        if (controleOutro == null) {
            controleOutro = new ControleOutro();
        }
        
    }
    
    public void iniciaControleUsuario() {
        
        if (controleUsuario == null) {
            controleUsuario = new ControleUsuario();
        }
        
    }
    
    public void iniciaDao() {

        if (dao == null) {
            dao = new DAO();
        }

    }

    public void iniciaEscola() {
        
        if (escola == null) {
            escola = new Escola();
        }
        
    }
    
    public void iniciaLog() {
        
        if (geraLog == null) {
            geraLog = new Log();
        }
        
    }
    
    public void iniciaOutro() {
        
        if (outro == null) {
            outro = new Outro();
        }
        
    }
    
    public void iniciaUsuario() {
        
        if (usuario == null) {
            usuario = new Usuario();
        }
        
    }
    
    public void iniciaVerificadorDataPeriodo() {
        
        if (verificadorDataPeriodo == null) {
            verificadorDataPeriodo = new VerificadorDataPeriodo();
        }
        
    }
    
    public String verificaAgendamentoExistente() {

        iniciaDao();
        
        int codigoCmei = 0;
        int codigoEscola = 0;
        int codigoOutro = 0;
        String retorno;

        switch (tipoEntid) {
            
            case "CMEI":
                iniciaControleCmei();
                codigoCmei = controleCmei.getCodigoCmei(jcbNomeEntidade.getSelectedItem().toString());
                break;
                
            case "ESCOLA":
                iniciaControleEscola();
                codigoEscola = controleEscola.getCodigoEscola(jcbNomeEntidade.getSelectedItem().toString());
                break;
                
            case "OUTROS":
                iniciaControleOutro();
                codigoOutro = controleOutro.getCodigoOutro(jcbNomeEntidade.getSelectedItem().toString());
                break;    
            
        }
        
        retorno = dao.verificarAgendamentoExistente(codigoCmei, codigoEscola, codigoOutro, tipoEntid, "AGENDADO", "A");

        return retorno;

    }
    
    public boolean verificaResolucao() {

        if (jDateChooserResolucao.getDate() != null || jcbStatus.getSelectedItem().equals("ATENDIDO")) {

            int contaResolucao = 0;

            if (!jcbStatus.getSelectedItem().equals("ATENDIDO")) {
                contaResolucao += 1;
            }

            if (jDateChooserResolucao.getDate() == null) {
                contaResolucao += 1;
            }

            if (jcbNomeUsuarioAtendimento.getSelectedIndex() == 0) {
                contaResolucao += 1;
            }

            if (jtaProblemaConstatado.getText().equals("")) {
                contaResolucao += 1;
            }
            
            if (!jrbRecolheuMaquinaNao.isSelected() && !jrbRecolheuMaquinaSim.isSelected()) {
                contaResolucao += 1;
            }

            if (contaResolucao > 0) {
                return true;
            } else {
                return false;
            }
            
        } else {
            return false;
        }

    }
    
//Getters and Setters===========================================================================================================================================
    public Date getDateHoje() {

        GregorianCalendar calendar = new GregorianCalendar();
        Date data = calendar.getTime();

        return data;

    }

    public String getHoraAtual() {

        GregorianCalendar calendar = new GregorianCalendar();
        Date data = calendar.getTime();

        String hora;
        String minuto;

        if (data.getHours() < 10) {
            hora = "0" + data.getHours();
        } else {
            hora = String.valueOf(data.getHours());
        }

        if (data.getMinutes() < 10) {
            minuto = "0" + data.getMinutes();
        } else {
            minuto = String.valueOf(data.getMinutes());
        }

        return hora + minuto;

    }

    public String getAno() {

        return "Ano de " + versao.getAno();

    }

    public void setNumeroCaracteres() {

        jtaProblemaInformado.setDocument(new FixedLengthDocument(400));
        jtaProblemaConstatado.setDocument(new FixedLengthDocument(400));
        jtfLocalEntidade.setDocument(new FixedLengthDocument(60));

    }

    public int getCodigoUsuario() {
        return codigoUsuario;
    }

    public void setCodigoUsuario(int codigoUsuario) {
        iniciaControleUsuario();
        this.codigoUsuario = codigoUsuario;
        getPermissoes();
        jcbNomeUsuario.setSelectedItem(controleUsuario.getNomeUsuario(codigoUsuario));
        jcbNomeUsuarioAtendimento.setSelectedItem(controleUsuario.getNomeUsuario(codigoUsuario));
        desabilitaBotoes();
    }

    public void getPermissoes() {
        Permissoes permissoes;
        iniciaDao();
        //DAO dao = new DAO();

        permissoes = (Permissoes) dao.buscaPermissoes(codigoUsuario);

        agendarAgendamento = permissoes.isAgendarAgendamento();
        agendarAgendamentoBuscar = permissoes.isAgendarAgendamentoBuscar();
        colocarEmAtendimentoAgendamento = permissoes.isColocarEmAtendimentoAgendamento();

    }

    public void setAgendamentoBuscado(Agendamento agendamentoBuscado) {

        if (agendamentoBuscado == null) {
        } else {

            iniciaAgendamento();
            
            if (agendamentoBuscado.getTipoEntidade().equals("ESCOLA")) {
                
                jrbEscola.setSelected(true);
                tipoEntid = "ESCOLA";
                preencheComboEscolas();
                jcbNomeEntidade.setSelectedItem(agendamentoBuscado.getEscola().getNomeEscola());
                
            } else if (agendamentoBuscado.getTipoEntidade().equals("CMEI")) {
                
                jrbCmei.setSelected(true);
                tipoEntid = "CMEI";
                preencheComboCmeis();
                jcbNomeEntidade.setSelectedItem(agendamentoBuscado.getCmei().getNomeCmei());
                
            } else if (agendamentoBuscado.getTipoEntidade().equals("OUTROS")) {
                
                jrbOutros.setSelected(true);
                tipoEntid = "OUTROS";
                preencheComboOutros();
                jcbNomeEntidade.setSelectedItem(agendamentoBuscado.getOutro().getNomeOutro());
                
            }

            if (agendamentoBuscado.getTipoAgendamento().equals("AGENDAMENTO PONTO DIGITAL")) {
                jrbTipoAgendamentoPontoDigital.setSelected(true);
                tipoAgend = "AGENDAMENTO PONTO DIGITAL";
            } else if (agendamentoBuscado.getTipoAgendamento().equals("AGENDAMENTO OFICIO")) {
                jrbTipoAgendamentoOficio.setSelected(true);
                tipoAgend = "AGENDAMENTO OFICIO";
            } else {
                jrbTipoAgendamentoNormal.setSelected(true);
                tipoAgend = "AGENDAMENTO NORMAL";
            }

            preencheComboUsuarios();

            jtaProblemaInformado.setText(agendamentoBuscado.getProblemaInformado());
            jtaProblemaConstatado.setText(agendamentoBuscado.getProblemaConstatado());
            jtfLocalEntidade.setText(agendamentoBuscado.getLocalEntidade());
            jcbStatus.setSelectedItem(agendamentoBuscado.getStatus());
            
            jcbNomeUsuario.setSelectedItem(agendamentoBuscado.getUsuario().getNomeUsuario());
            if (agendamentoBuscado.getUsuarioAtendimento() != null) {
                jcbNomeUsuarioAtendimento.setSelectedItem(agendamentoBuscado.getUsuarioAtendimento().getNomeUsuario());
            }
            
            jDateChooserSolicitacao.setDate(agendamentoBuscado.getDataSolicitacao());
            jDateChooserResolucao.setDate(agendamentoBuscado.getDataResolucao());
            jftfHoraSolicitacao.setText(agendamentoBuscado.getHoraSolicitacao());

            codigo = agendamentoBuscado.getCodigoAgendamento();//para testar comando excluir
            agendamento = agendamentoBuscado;
            agendamento.setCodigoAgendamento(codigo);

            desabilitaCampos();

            opcao = "alterar";

            abilitaBotoes();

        }
    }
    
//Metodos DAO===========================================================================================================================================
    public void salvarAgendamento() {

        iniciaAgendamento();
        iniciaDao();

        agendamento.setLocalEntidade(jtfLocalEntidade.getText());
        agendamento.setProblemaInformado(jtaProblemaInformado.getText());
        agendamento.setDataResolucao(jDateChooserResolucao.getDate());
        agendamento.setDataSolicitacao(jDateChooserSolicitacao.getDate());
        agendamento.setDataRecolhimento(jDateChooserRecolhimento.getDate());
        agendamento.setAnoAgendamento(versao.getAno());
        agendamento.setStatus((String) jcbStatus.getSelectedItem());
        
        iniciaUsuario();
        usuario = (Usuario) dao.buscaUsuario(0, jcbNomeUsuario.getSelectedItem().toString(), "");
        agendamento.setUsuario(usuario);
        usuario = null;
        
        iniciaUsuario();
        usuario = (Usuario) dao.buscaUsuario(0, jcbNomeUsuarioAtendimento.getSelectedItem().toString(), "");
        agendamento.setUsuarioAtendimento(usuario);
        usuario = null;
        
        agendamento.setProblemaConstatado(jtaProblemaConstatado.getText());
        agendamento.setTipoAgendamento(tipoAgend);
        atualizaHora();
        agendamento.setHoraSolicitacao(jftfHoraSolicitacao.getText());
        
        if (jrbEscola.isSelected()) {
            
            iniciaEscola();
            agendamento.setTipoEntidade("ESCOLA");
            escola = (Escola) dao.buscaEscola(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamento.setEscola(escola);
            
        } else if (jrbCmei.isSelected()) {
            
            iniciaCmei();
            agendamento.setTipoEntidade("CMEI");
            cmei = (Cmei) dao.buscaCmei(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamento.setCmei(cmei);
            
        } else if (jrbOutros.isSelected()) {
            
            iniciaOutro();
            agendamento.setTipoEntidade("OUTROS");
            outro = (Outro) dao.buscaOutro(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamento.setOutro(outro);
            
        }

        if (jrbRecolheuMaquinaSim.isSelected()) {
            agendamento.setRecolheuMaquina(true);
        } else {
            agendamento.setRecolheuMaquina(false);
        }

        try {
            iniciaLog();
            geraLog.criaLog(codigoUsuario, "Agendamento", "Tentou Salvar " + agendamento.getTipoAgendamento() + " do(a) " + agendamento.getTipoEntidade() + " " + jcbNomeEntidade.getSelectedItem().toString());
        } catch (IOException ex) {
            Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        dao.inserir(agendamento, 7, codigoUsuario);

    }

    public void salvar() {

        if (jrbTipoAgendamentoNormal.isSelected()) {

            if (jcbNomeEntidade.getSelectedIndex() != 0 && !jtfLocalEntidade.getText().isEmpty() && !jtaProblemaInformado.getText().isEmpty()) {

                salvarAgendamento();

                cancelar();

            } else {
                iniciaClasseGeral();
                classeGeral.msgAtencao("Complete os Campos ObrigatÃ³rios, destacados em Azul!");
            }

        } else {

            if (jcbNomeEntidade.getSelectedIndex() != 0 && !jtfLocalEntidade.getText().isEmpty() && !jtaProblemaInformado.getText().isEmpty()) {

                salvarAgendamento();

                cancelar();

            } else {
                iniciaClasseGeral();
                classeGeral.msgAtencao("Complete os Campos ObrigatÃ³rios, destacados em Azul!");
            }

        }

    }

    public void atualizarAgendamento() {

        iniciaDao();
        iniciaAgendamento();
        iniciaAgendamento();
        
        agendamento.setLocalEntidade(jtfLocalEntidade.getText());
        agendamento.setProblemaInformado(jtaProblemaInformado.getText());
        agendamento.setDataResolucao(jDateChooserResolucao.getDate());
        agendamento.setDataRecolhimento(jDateChooserRecolhimento.getDate());
        agendamento.setDataSolicitacao(jDateChooserSolicitacao.getDate());
        agendamento.setAnoAgendamento(versao.getAno());
        agendamento.setStatus((String) jcbStatus.getSelectedItem());
        
        iniciaUsuario();
        usuario = (Usuario) dao.buscaUsuario(0, jcbNomeUsuario.getSelectedItem().toString(), "");
        agendamento.setUsuario(usuario);
        usuario = null;
        
        iniciaUsuario();
        usuario = (Usuario) dao.buscaUsuario(0, jcbNomeUsuarioAtendimento.getSelectedItem().toString(), "");
        agendamento.setUsuarioAtendimento(usuario);
        usuario = null;
        
        agendamento.setProblemaConstatado(jtaProblemaConstatado.getText());
        agendamento.setTipoAgendamento(tipoAgend);
        agendamento.setHoraSolicitacao(jftfHoraSolicitacao.getText());
        
        if (jrbEscola.isSelected() == true) {
            
            iniciaEscola();
            agendamento.setTipoEntidade("ESCOLA");
            escola = (Escola) dao.buscaEscola(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamento.setEscola(escola);
            
        } else if (jrbCmei.isSelected() == true) {
            
            iniciaCmei();
            agendamento.setTipoEntidade("CMEI");
            cmei = (Cmei) dao.buscaCmei(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamento.setCmei(cmei);
            
        } else if (jrbOutros.isSelected() == true) {
            
            iniciaOutro();
            agendamento.setTipoEntidade("OUTROS");
            outro = (Outro) dao.buscaOutro(0, jcbNomeEntidade.getSelectedItem().toString(), "");
            agendamento.setOutro(outro);
            
        }

        try {
            iniciaLog();
            geraLog.criaLog(codigoUsuario, "Agendamento", "Tentou Atualizar " + agendamento.getTipoAgendamento() + " CÃ³digo: " + agendamento.getCodigoAgendamento() + " do(a) " + agendamento.getTipoEntidade() + " " + jcbNomeEntidade.getSelectedItem().toString());
        } catch (IOException ex) {
            Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        dao.atualizar(agendamento, 7, codigoUsuario);

    }

    public void atualizar() {

        if (jrbTipoAgendamentoNormal.isSelected()) {

            if (jcbNomeEntidade.getSelectedIndex() != 0 && !jtfLocalEntidade.getText().isEmpty() && !jtaProblemaInformado.getText().isEmpty()) {

                atualizarAgendamento();

                cancelar();

            } else {
                iniciaClasseGeral();
                classeGeral.msgAtencao("Complete os Campos ObrigatÃ³rios, destacados em Azul!");
            }

        } else {

            if (jcbNomeEntidade.getSelectedIndex() != 0 && !jtfLocalEntidade.getText().isEmpty() && !jtaProblemaInformado.getText().isEmpty()) {

                atualizarAgendamento();

                cancelar();

            } else {
                iniciaClasseGeral();
                classeGeral.msgAtencao("Complete os Campos ObrigatÃ³rios, destacados em Azul!");
            }

        }

    }

    public void excluir() {

        iniciaClasseGeral();
        iniciaAgendamento();

         if (classeGeral.msgConfirma("Deseja excluir o Agendamento?")) {

            iniciaDao();
            //DAO dao = new DAO();
            
            try {
                iniciaLog();
                geraLog.criaLog(codigoUsuario, "Agendamento", "Tentou Excluir " + agendamento.getTipoAgendamento() + " CÃ³digo: " + agendamento.getCodigoAgendamento() + " do(a) " + agendamento.getTipoEntidade() + " " + jcbNomeEntidade.getSelectedItem().toString());
            } catch (IOException ex) {
                Logger.getLogger(JfPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            dao.excluir(agendamento, codigoUsuario);
            cancelar();

        }

    }
}
